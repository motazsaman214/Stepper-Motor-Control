
IndvidualProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00002946  000029da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080019e  0080019e  00002b18  2**0
                  ALLOC
  3 .stab         000018d8  00000000  00000000  00002b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e6c  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000525c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000055ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000075bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000871e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009724  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  000098c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00009b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_1>
       8:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <main>
      8a:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e1 57       	subi	r30, 0x71	; 113
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <LCD_init>:
/**
 * @brief Initialize the LCD.
 *
 * This function initializes the LCD in either 4-bit or 8-bit mode.
 */
void LCD_init(void) {
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
    LCD_CTRL_PORT_DIR |= (1 << RS) | (1 << RW) | (1 << E);
     ca8:	a7 e3       	ldi	r26, 0x37	; 55
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e3       	ldi	r30, 0x37	; 55
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	87 60       	ori	r24, 0x07	; 7
     cb4:	8c 93       	st	X, r24
    #if (DATA_BITS_MODE == 4)
        #ifdef UPPER_PORT_PINS
            LCD_DATA_PORT_DIR |= 0xF0;
        #else
            SET_BIT(LCD_DATA_PORT, 0x0F);
     cb6:	ab e3       	ldi	r26, 0x3B	; 59
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e3       	ldi	r30, 0x3B	; 59
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8c 93       	st	X, r24
        #endif
        LCD_sendCommand(FOUR_BITS_DATA_MODE);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
        LCD_sendCommand(TWO_LINE_4_BIT_MODE);
     cc8:	88 e2       	ldi	r24, 0x28	; 40
     cca:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
    #elif (DATA_BITS_MODE == 8)
        LCD_DATA_PORT_DIR = 0xFF;
        LCD_sendCommand(TWO_LINE_8_BIT_MODE);
    #endif
    LCD_sendCommand(DISPLAY_ON_CURSOR_BLINKING);
     cce:	8f e0       	ldi	r24, 0x0F	; 15
     cd0:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
    LCD_sendCommand(CLEAR_DISPLAY);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <LCD_sendCommand>:
 *
 * This function sends a command to the LCD in either 4-bit or 8-bit mode.
 *
 * @param command The command to send.
 */
void LCD_sendCommand(uint8 command) {
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	c3 56       	subi	r28, 0x63	; 99
     cee:	d0 40       	sbci	r29, 0x00	; 0
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	fe 01       	movw	r30, r28
     cfc:	ed 59       	subi	r30, 0x9D	; 157
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 83       	st	Z, r24
    CLEAR_BIT(LCD_CTRL_PORT, RS);
     d02:	a8 e3       	ldi	r26, 0x38	; 56
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e8 e3       	ldi	r30, 0x38	; 56
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW);
     d10:	a8 e3       	ldi	r26, 0x38	; 56
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e3       	ldi	r30, 0x38	; 56
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
     d1c:	8c 93       	st	X, r24
     d1e:	fe 01       	movw	r30, r28
     d20:	e1 5a       	subi	r30, 0xA1	; 161
     d22:	ff 4f       	sbci	r31, 0xFF	; 255
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	a0 e8       	ldi	r26, 0x80	; 128
     d2a:	bf e3       	ldi	r27, 0x3F	; 63
     d2c:	80 83       	st	Z, r24
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	a2 83       	std	Z+2, r26	; 0x02
     d32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d34:	8e 01       	movw	r16, r28
     d36:	05 5a       	subi	r16, 0xA5	; 165
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	fe 01       	movw	r30, r28
     d3c:	e1 5a       	subi	r30, 0xA1	; 161
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	53 e4       	ldi	r21, 0x43	; 67
     d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	a2 83       	std	Z+2, r26	; 0x02
     d60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d62:	fe 01       	movw	r30, r28
     d64:	e5 5a       	subi	r30, 0xA5	; 165
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d7c:	88 23       	and	r24, r24
     d7e:	44 f4       	brge	.+16     	; 0xd90 <LCD_sendCommand+0xb0>
		__ticks = 1;
     d80:	fe 01       	movw	r30, r28
     d82:	e7 5a       	subi	r30, 0xA7	; 167
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	64 c0       	rjmp	.+200    	; 0xe58 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     d90:	fe 01       	movw	r30, r28
     d92:	e5 5a       	subi	r30, 0xA5	; 165
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <LCD_sendCommand+0xd0>
     dae:	43 c0       	rjmp	.+134    	; 0xe36 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db0:	fe 01       	movw	r30, r28
     db2:	e1 5a       	subi	r30, 0xA1	; 161
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	60 81       	ld	r22, Z
     db8:	71 81       	ldd	r23, Z+1	; 0x01
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e2       	ldi	r20, 0x20	; 32
     dc4:	51 e4       	ldi	r21, 0x41	; 65
     dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	8e 01       	movw	r16, r28
     dd0:	07 5a       	subi	r16, 0xA7	; 167
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	f8 01       	movw	r30, r16
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
     de6:	1f c0       	rjmp	.+62     	; 0xe26 <LCD_sendCommand+0x146>
     de8:	fe 01       	movw	r30, r28
     dea:	e9 5a       	subi	r30, 0xA9	; 169
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	89 e1       	ldi	r24, 0x19	; 25
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     df6:	fe 01       	movw	r30, r28
     df8:	e9 5a       	subi	r30, 0xA9	; 169
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <LCD_sendCommand+0x120>
     e04:	fe 01       	movw	r30, r28
     e06:	e9 5a       	subi	r30, 0xA9	; 169
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0e:	de 01       	movw	r26, r28
     e10:	a7 5a       	subi	r26, 0xA7	; 167
     e12:	bf 4f       	sbci	r27, 0xFF	; 255
     e14:	fe 01       	movw	r30, r28
     e16:	e7 5a       	subi	r30, 0xA7	; 167
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e26:	fe 01       	movw	r30, r28
     e28:	e7 5a       	subi	r30, 0xA7	; 167
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	d1 f6       	brne	.-76     	; 0xde8 <LCD_sendCommand+0x108>
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e36:	8e 01       	movw	r16, r28
     e38:	07 5a       	subi	r16, 0xA7	; 167
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	fe 01       	movw	r30, r28
     e3e:	e5 5a       	subi	r30, 0xA5	; 165
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	60 81       	ld	r22, Z
     e44:	71 81       	ldd	r23, Z+1	; 0x01
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	f8 01       	movw	r30, r16
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
     e58:	de 01       	movw	r26, r28
     e5a:	ab 5a       	subi	r26, 0xAB	; 171
     e5c:	bf 4f       	sbci	r27, 0xFF	; 255
     e5e:	fe 01       	movw	r30, r28
     e60:	e7 5a       	subi	r30, 0xA7	; 167
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	8d 93       	st	X+, r24
     e6a:	9c 93       	st	X, r25
     e6c:	fe 01       	movw	r30, r28
     e6e:	eb 5a       	subi	r30, 0xAB	; 171
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <LCD_sendCommand+0x196>
     e7a:	fe 01       	movw	r30, r28
     e7c:	eb 5a       	subi	r30, 0xAB	; 171
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
    _delay_ms(1);
    SET_BIT(LCD_CTRL_PORT, E);
     e84:	a8 e3       	ldi	r26, 0x38	; 56
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e8 e3       	ldi	r30, 0x38	; 56
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	84 60       	ori	r24, 0x04	; 4
     e90:	8c 93       	st	X, r24
     e92:	fe 01       	movw	r30, r28
     e94:	ef 5a       	subi	r30, 0xAF	; 175
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	a0 e8       	ldi	r26, 0x80	; 128
     e9e:	bf e3       	ldi	r27, 0x3F	; 63
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea8:	8e 01       	movw	r16, r28
     eaa:	03 5b       	subi	r16, 0xB3	; 179
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	fe 01       	movw	r30, r28
     eb0:	ef 5a       	subi	r30, 0xAF	; 175
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	4a e7       	ldi	r20, 0x7A	; 122
     ec2:	53 e4       	ldi	r21, 0x43	; 67
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	f8 01       	movw	r30, r16
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ed6:	fe 01       	movw	r30, r28
     ed8:	e3 5b       	subi	r30, 0xB3	; 179
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	44 f4       	brge	.+16     	; 0xf04 <LCD_sendCommand+0x224>
		__ticks = 1;
     ef4:	fe 01       	movw	r30, r28
     ef6:	e5 5b       	subi	r30, 0xB5	; 181
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
     f02:	64 c0       	rjmp	.+200    	; 0xfcc <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     f04:	fe 01       	movw	r30, r28
     f06:	e3 5b       	subi	r30, 0xB3	; 179
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	0c f0       	brlt	.+2      	; 0xf24 <LCD_sendCommand+0x244>
     f22:	43 c0       	rjmp	.+134    	; 0xfaa <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	fe 01       	movw	r30, r28
     f26:	ef 5a       	subi	r30, 0xAF	; 175
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8e 01       	movw	r16, r28
     f44:	05 5b       	subi	r16, 0xB5	; 181
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	bc 01       	movw	r22, r24
     f4a:	cd 01       	movw	r24, r26
     f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	f8 01       	movw	r30, r16
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
     f5a:	1f c0       	rjmp	.+62     	; 0xf9a <LCD_sendCommand+0x2ba>
     f5c:	fe 01       	movw	r30, r28
     f5e:	e7 5b       	subi	r30, 0xB7	; 183
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	89 e1       	ldi	r24, 0x19	; 25
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
     f6a:	fe 01       	movw	r30, r28
     f6c:	e7 5b       	subi	r30, 0xB7	; 183
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <LCD_sendCommand+0x294>
     f78:	fe 01       	movw	r30, r28
     f7a:	e7 5b       	subi	r30, 0xB7	; 183
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	de 01       	movw	r26, r28
     f84:	a5 5b       	subi	r26, 0xB5	; 181
     f86:	bf 4f       	sbci	r27, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	e5 5b       	subi	r30, 0xB5	; 181
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	11 96       	adiw	r26, 0x01	; 1
     f96:	9c 93       	st	X, r25
     f98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 5b       	subi	r30, 0xB5	; 181
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	d1 f6       	brne	.-76     	; 0xf5c <LCD_sendCommand+0x27c>
     fa8:	27 c0       	rjmp	.+78     	; 0xff8 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     faa:	8e 01       	movw	r16, r28
     fac:	05 5b       	subi	r16, 0xB5	; 181
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	fe 01       	movw	r30, r28
     fb2:	e3 5b       	subi	r30, 0xB3	; 179
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	82 81       	ldd	r24, Z+2	; 0x02
     fbc:	93 81       	ldd	r25, Z+3	; 0x03
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	f8 01       	movw	r30, r16
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
     fcc:	de 01       	movw	r26, r28
     fce:	a9 5b       	subi	r26, 0xB9	; 185
     fd0:	bf 4f       	sbci	r27, 0xFF	; 255
     fd2:	fe 01       	movw	r30, r28
     fd4:	e5 5b       	subi	r30, 0xB5	; 181
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	8d 93       	st	X+, r24
     fde:	9c 93       	st	X, r25
     fe0:	fe 01       	movw	r30, r28
     fe2:	e9 5b       	subi	r30, 0xB9	; 185
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <LCD_sendCommand+0x30a>
     fee:	fe 01       	movw	r30, r28
     ff0:	e9 5b       	subi	r30, 0xB9	; 185
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
    _delay_ms(1);
    #if (DATA_BITS_MODE == 4)
        #ifdef UPPER_PORT_PINS
            LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
        #else
            LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
     ff8:	ab e3       	ldi	r26, 0x3B	; 59
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	98 2f       	mov	r25, r24
    1004:	90 7f       	andi	r25, 0xF0	; 240
    1006:	fe 01       	movw	r30, r28
    1008:	ed 59       	subi	r30, 0x9D	; 157
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	82 95       	swap	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	89 2b       	or	r24, r25
    1014:	8c 93       	st	X, r24
    1016:	fe 01       	movw	r30, r28
    1018:	ed 5b       	subi	r30, 0xBD	; 189
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e8       	ldi	r26, 0x80	; 128
    1022:	bf e3       	ldi	r27, 0x3F	; 63
    1024:	80 83       	st	Z, r24
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	a2 83       	std	Z+2, r26	; 0x02
    102a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	8e 01       	movw	r16, r28
    102e:	01 5c       	subi	r16, 0xC1	; 193
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	fe 01       	movw	r30, r28
    1034:	ed 5b       	subi	r30, 0xBD	; 189
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a e7       	ldi	r20, 0x7A	; 122
    1046:	53 e4       	ldi	r21, 0x43	; 67
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	f8 01       	movw	r30, r16
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
    1058:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    105a:	fe 01       	movw	r30, r28
    105c:	ff 96       	adiw	r30, 0x3f	; 63
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e af       	std	Y+62, r25	; 0x3e
    107c:	8d af       	std	Y+61, r24	; 0x3d
    107e:	46 c0       	rjmp	.+140    	; 0x110c <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    1080:	fe 01       	movw	r30, r28
    1082:	ff 96       	adiw	r30, 0x3f	; 63
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	64 f5       	brge	.+88     	; 0x10f4 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	fe 01       	movw	r30, r28
    109e:	ed 5b       	subi	r30, 0xBD	; 189
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	bc 01       	movw	r22, r24
    10bc:	cd 01       	movw	r24, r26
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9e af       	std	Y+62, r25	; 0x3e
    10c8:	8d af       	std	Y+61, r24	; 0x3d
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <LCD_sendCommand+0x40a>
    10cc:	89 e1       	ldi	r24, 0x19	; 25
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c af       	std	Y+60, r25	; 0x3c
    10d2:	8b af       	std	Y+59, r24	; 0x3b
    10d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <LCD_sendCommand+0x3f8>
    10dc:	9c af       	std	Y+60, r25	; 0x3c
    10de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	9e af       	std	Y+62, r25	; 0x3e
    10e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f7       	brne	.-38     	; 0x10cc <LCD_sendCommand+0x3ec>
    10f2:	16 c0       	rjmp	.+44     	; 0x1120 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f4:	fe 01       	movw	r30, r28
    10f6:	ff 96       	adiw	r30, 0x3f	; 63
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e af       	std	Y+62, r25	; 0x3e
    110a:	8d af       	std	Y+61, r24	; 0x3d
    110c:	8d ad       	ldd	r24, Y+61	; 0x3d
    110e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1110:	9a af       	std	Y+58, r25	; 0x3a
    1112:	89 af       	std	Y+57, r24	; 0x39
    1114:	89 ad       	ldd	r24, Y+57	; 0x39
    1116:	9a ad       	ldd	r25, Y+58	; 0x3a
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LCD_sendCommand+0x438>
    111c:	9a af       	std	Y+58, r25	; 0x3a
    111e:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
    1120:	a8 e3       	ldi	r26, 0x38	; 56
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	8c 93       	st	X, r24
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a0 e8       	ldi	r26, 0x80	; 128
    1134:	bf e3       	ldi	r27, 0x3F	; 63
    1136:	8d ab       	std	Y+53, r24	; 0x35
    1138:	9e ab       	std	Y+54, r25	; 0x36
    113a:	af ab       	std	Y+55, r26	; 0x37
    113c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113e:	6d a9       	ldd	r22, Y+53	; 0x35
    1140:	7e a9       	ldd	r23, Y+54	; 0x36
    1142:	8f a9       	ldd	r24, Y+55	; 0x37
    1144:	98 ad       	ldd	r25, Y+56	; 0x38
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	4a e7       	ldi	r20, 0x7A	; 122
    114c:	53 e4       	ldi	r21, 0x43	; 67
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	89 ab       	std	Y+49, r24	; 0x31
    1158:	9a ab       	std	Y+50, r25	; 0x32
    115a:	ab ab       	std	Y+51, r26	; 0x33
    115c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    115e:	69 a9       	ldd	r22, Y+49	; 0x31
    1160:	7a a9       	ldd	r23, Y+50	; 0x32
    1162:	8b a9       	ldd	r24, Y+51	; 0x33
    1164:	9c a9       	ldd	r25, Y+52	; 0x34
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	5f e3       	ldi	r21, 0x3F	; 63
    116e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1172:	88 23       	and	r24, r24
    1174:	2c f4       	brge	.+10     	; 0x1180 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	98 ab       	std	Y+48, r25	; 0x30
    117c:	8f a7       	std	Y+47, r24	; 0x2f
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1180:	69 a9       	ldd	r22, Y+49	; 0x31
    1182:	7a a9       	ldd	r23, Y+50	; 0x32
    1184:	8b a9       	ldd	r24, Y+51	; 0x33
    1186:	9c a9       	ldd	r25, Y+52	; 0x34
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	4f e7       	ldi	r20, 0x7F	; 127
    118e:	57 e4       	ldi	r21, 0x47	; 71
    1190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1194:	18 16       	cp	r1, r24
    1196:	4c f5       	brge	.+82     	; 0x11ea <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1198:	6d a9       	ldd	r22, Y+53	; 0x35
    119a:	7e a9       	ldd	r23, Y+54	; 0x36
    119c:	8f a9       	ldd	r24, Y+55	; 0x37
    119e:	98 ad       	ldd	r25, Y+56	; 0x38
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	98 ab       	std	Y+48, r25	; 0x30
    11be:	8f a7       	std	Y+47, r24	; 0x2f
    11c0:	0f c0       	rjmp	.+30     	; 0x11e0 <LCD_sendCommand+0x500>
    11c2:	89 e1       	ldi	r24, 0x19	; 25
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9e a7       	std	Y+46, r25	; 0x2e
    11c8:	8d a7       	std	Y+45, r24	; 0x2d
    11ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    11cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <LCD_sendCommand+0x4ee>
    11d2:	9e a7       	std	Y+46, r25	; 0x2e
    11d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d8:	98 a9       	ldd	r25, Y+48	; 0x30
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	98 ab       	std	Y+48, r25	; 0x30
    11de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e2:	98 a9       	ldd	r25, Y+48	; 0x30
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <LCD_sendCommand+0x4e2>
    11e8:	14 c0       	rjmp	.+40     	; 0x1212 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ea:	69 a9       	ldd	r22, Y+49	; 0x31
    11ec:	7a a9       	ldd	r23, Y+50	; 0x32
    11ee:	8b a9       	ldd	r24, Y+51	; 0x33
    11f0:	9c a9       	ldd	r25, Y+52	; 0x34
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	98 ab       	std	Y+48, r25	; 0x30
    11fc:	8f a7       	std	Y+47, r24	; 0x2f
    11fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1200:	98 a9       	ldd	r25, Y+48	; 0x30
    1202:	9c a7       	std	Y+44, r25	; 0x2c
    1204:	8b a7       	std	Y+43, r24	; 0x2b
    1206:	8b a5       	ldd	r24, Y+43	; 0x2b
    1208:	9c a5       	ldd	r25, Y+44	; 0x2c
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <LCD_sendCommand+0x52a>
    120e:	9c a7       	std	Y+44, r25	; 0x2c
    1210:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1);
        SET_BIT(LCD_CTRL_PORT, E);
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	84 60       	ori	r24, 0x04	; 4
    121e:	8c 93       	st	X, r24
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e8       	ldi	r26, 0x80	; 128
    1226:	bf e3       	ldi	r27, 0x3F	; 63
    1228:	8f a3       	std	Y+39, r24	; 0x27
    122a:	98 a7       	std	Y+40, r25	; 0x28
    122c:	a9 a7       	std	Y+41, r26	; 0x29
    122e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	6f a1       	ldd	r22, Y+39	; 0x27
    1232:	78 a5       	ldd	r23, Y+40	; 0x28
    1234:	89 a5       	ldd	r24, Y+41	; 0x29
    1236:	9a a5       	ldd	r25, Y+42	; 0x2a
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a e7       	ldi	r20, 0x7A	; 122
    123e:	53 e4       	ldi	r21, 0x43	; 67
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8b a3       	std	Y+35, r24	; 0x23
    124a:	9c a3       	std	Y+36, r25	; 0x24
    124c:	ad a3       	std	Y+37, r26	; 0x25
    124e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1250:	6b a1       	ldd	r22, Y+35	; 0x23
    1252:	7c a1       	ldd	r23, Y+36	; 0x24
    1254:	8d a1       	ldd	r24, Y+37	; 0x25
    1256:	9e a1       	ldd	r25, Y+38	; 0x26
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	2c f4       	brge	.+10     	; 0x1272 <LCD_sendCommand+0x592>
		__ticks = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9a a3       	std	Y+34, r25	; 0x22
    126e:	89 a3       	std	Y+33, r24	; 0x21
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    1272:	6b a1       	ldd	r22, Y+35	; 0x23
    1274:	7c a1       	ldd	r23, Y+36	; 0x24
    1276:	8d a1       	ldd	r24, Y+37	; 0x25
    1278:	9e a1       	ldd	r25, Y+38	; 0x26
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	4c f5       	brge	.+82     	; 0x12dc <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	6f a1       	ldd	r22, Y+39	; 0x27
    128c:	78 a5       	ldd	r23, Y+40	; 0x28
    128e:	89 a5       	ldd	r24, Y+41	; 0x29
    1290:	9a a5       	ldd	r25, Y+42	; 0x2a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9a a3       	std	Y+34, r25	; 0x22
    12b0:	89 a3       	std	Y+33, r24	; 0x21
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <LCD_sendCommand+0x5f2>
    12b4:	89 e1       	ldi	r24, 0x19	; 25
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	98 a3       	std	Y+32, r25	; 0x20
    12ba:	8f 8f       	std	Y+31, r24	; 0x1f
    12bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12be:	98 a1       	ldd	r25, Y+32	; 0x20
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <LCD_sendCommand+0x5e0>
    12c4:	98 a3       	std	Y+32, r25	; 0x20
    12c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ca:	9a a1       	ldd	r25, Y+34	; 0x22
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9a a3       	std	Y+34, r25	; 0x22
    12d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	89 a1       	ldd	r24, Y+33	; 0x21
    12d4:	9a a1       	ldd	r25, Y+34	; 0x22
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <LCD_sendCommand+0x5d4>
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6b a1       	ldd	r22, Y+35	; 0x23
    12de:	7c a1       	ldd	r23, Y+36	; 0x24
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	9e a1       	ldd	r25, Y+38	; 0x26
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9a a3       	std	Y+34, r25	; 0x22
    12ee:	89 a3       	std	Y+33, r24	; 0x21
    12f0:	89 a1       	ldd	r24, Y+33	; 0x21
    12f2:	9a a1       	ldd	r25, Y+34	; 0x22
    12f4:	9e 8f       	std	Y+30, r25	; 0x1e
    12f6:	8d 8f       	std	Y+29, r24	; 0x1d
    12f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <LCD_sendCommand+0x61c>
    1300:	9e 8f       	std	Y+30, r25	; 0x1e
    1302:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        #ifdef UPPER_PORT_PINS
            LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
        #else
            LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	98 2f       	mov	r25, r24
    1310:	90 7f       	andi	r25, 0xF0	; 240
    1312:	fe 01       	movw	r30, r28
    1314:	ed 59       	subi	r30, 0x9D	; 157
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	8f 70       	andi	r24, 0x0F	; 15
    131c:	89 2b       	or	r24, r25
    131e:	8c 93       	st	X, r24
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e8       	ldi	r26, 0x80	; 128
    1326:	bf e3       	ldi	r27, 0x3F	; 63
    1328:	89 8f       	std	Y+25, r24	; 0x19
    132a:	9a 8f       	std	Y+26, r25	; 0x1a
    132c:	ab 8f       	std	Y+27, r26	; 0x1b
    132e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	69 8d       	ldd	r22, Y+25	; 0x19
    1332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a e7       	ldi	r20, 0x7A	; 122
    133e:	53 e4       	ldi	r21, 0x43	; 67
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8d 8b       	std	Y+21, r24	; 0x15
    134a:	9e 8b       	std	Y+22, r25	; 0x16
    134c:	af 8b       	std	Y+23, r26	; 0x17
    134e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1350:	6d 89       	ldd	r22, Y+21	; 0x15
    1352:	7e 89       	ldd	r23, Y+22	; 0x16
    1354:	8f 89       	ldd	r24, Y+23	; 0x17
    1356:	98 8d       	ldd	r25, Y+24	; 0x18
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <LCD_sendCommand+0x692>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	8f 89       	ldd	r24, Y+23	; 0x17
    1378:	98 8d       	ldd	r25, Y+24	; 0x18
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	69 8d       	ldd	r22, Y+25	; 0x19
    138c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    138e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1390:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <LCD_sendCommand+0x6f2>
    13b4:	89 e1       	ldi	r24, 0x19	; 25
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9a 8b       	std	Y+18, r25	; 0x12
    13ba:	89 8b       	std	Y+17, r24	; 0x11
    13bc:	89 89       	ldd	r24, Y+17	; 0x11
    13be:	9a 89       	ldd	r25, Y+18	; 0x12
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_sendCommand+0x6e0>
    13c4:	9a 8b       	std	Y+18, r25	; 0x12
    13c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	9c 89       	ldd	r25, Y+20	; 0x14
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9c 8b       	std	Y+20, r25	; 0x14
    13d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8b 89       	ldd	r24, Y+19	; 0x13
    13d4:	9c 89       	ldd	r25, Y+20	; 0x14
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <LCD_sendCommand+0x6d4>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	98 8b       	std	Y+16, r25	; 0x10
    13f6:	8f 87       	std	Y+15, r24	; 0x0f
    13f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13fa:	98 89       	ldd	r25, Y+16	; 0x10
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_sendCommand+0x71c>
    1400:	98 8b       	std	Y+16, r25	; 0x10
    1402:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
    1404:	a8 e3       	ldi	r26, 0x38	; 56
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8b 7f       	andi	r24, 0xFB	; 251
    1410:	8c 93       	st	X, r24
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e8       	ldi	r26, 0x80	; 128
    1418:	bf e3       	ldi	r27, 0x3F	; 63
    141a:	8b 87       	std	Y+11, r24	; 0x0b
    141c:	9c 87       	std	Y+12, r25	; 0x0c
    141e:	ad 87       	std	Y+13, r26	; 0x0d
    1420:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	8f 83       	std	Y+7, r24	; 0x07
    143c:	98 87       	std	Y+8, r25	; 0x08
    143e:	a9 87       	std	Y+9, r26	; 0x09
    1440:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e8       	ldi	r20, 0x80	; 128
    1450:	5f e3       	ldi	r21, 0x3F	; 63
    1452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1456:	88 23       	and	r24, r24
    1458:	2c f4       	brge	.+10     	; 0x1464 <LCD_sendCommand+0x784>
		__ticks = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	3f c0       	rjmp	.+126    	; 0x14e2 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	57 e4       	ldi	r21, 0x47	; 71
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	4c f5       	brge	.+82     	; 0x14ce <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e2       	ldi	r20, 0x20	; 32
    148a:	51 e4       	ldi	r21, 0x41	; 65
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <LCD_sendCommand+0x7e4>
    14a6:	89 e1       	ldi	r24, 0x19	; 25
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	9c 81       	ldd	r25, Y+4	; 0x04
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <LCD_sendCommand+0x7d2>
    14b6:	9c 83       	std	Y+4, r25	; 0x04
    14b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ba:	8d 81       	ldd	r24, Y+5	; 0x05
    14bc:	9e 81       	ldd	r25, Y+6	; 0x06
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	69 f7       	brne	.-38     	; 0x14a6 <LCD_sendCommand+0x7c6>
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	f1 f7       	brne	.-4      	; 0x14ee <LCD_sendCommand+0x80e>
    14f2:	9a 83       	std	Y+2, r25	; 0x02
    14f4:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA_PORT = command;
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
        _delay_ms(1);
    #endif
}
    14f6:	cd 59       	subi	r28, 0x9D	; 157
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	08 95       	ret

0000150e <LCD_displayCharacter>:
 *
 * This function displays a character on the LCD in either 4-bit or 8-bit mode.
 *
 * @param data The character to display.
 */
void LCD_displayCharacter(uint8 data) {
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	c3 56       	subi	r28, 0x63	; 99
    151c:	d0 40       	sbci	r29, 0x00	; 0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	fe 01       	movw	r30, r28
    152a:	ed 59       	subi	r30, 0x9D	; 157
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	80 83       	st	Z, r24
    SET_BIT(LCD_CTRL_PORT, RS);
    1530:	a8 e3       	ldi	r26, 0x38	; 56
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
    CLEAR_BIT(LCD_CTRL_PORT, RW);
    153e:	a8 e3       	ldi	r26, 0x38	; 56
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e3       	ldi	r30, 0x38	; 56
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8d 7f       	andi	r24, 0xFD	; 253
    154a:	8c 93       	st	X, r24
    154c:	fe 01       	movw	r30, r28
    154e:	e1 5a       	subi	r30, 0xA1	; 161
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e8       	ldi	r26, 0x80	; 128
    1558:	bf e3       	ldi	r27, 0x3F	; 63
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	8e 01       	movw	r16, r28
    1564:	05 5a       	subi	r16, 0xA5	; 165
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e1 5a       	subi	r30, 0xA1	; 161
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	53 e4       	ldi	r21, 0x43	; 67
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1590:	fe 01       	movw	r30, r28
    1592:	e5 5a       	subi	r30, 0xA5	; 165
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	44 f4       	brge	.+16     	; 0x15be <LCD_displayCharacter+0xb0>
		__ticks = 1;
    15ae:	fe 01       	movw	r30, r28
    15b0:	e7 5a       	subi	r30, 0xA7	; 167
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    15be:	fe 01       	movw	r30, r28
    15c0:	e5 5a       	subi	r30, 0xA5	; 165
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <LCD_displayCharacter+0xd0>
    15dc:	43 c0       	rjmp	.+134    	; 0x1664 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 5a       	subi	r30, 0xA1	; 161
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8e 01       	movw	r16, r28
    15fe:	07 5a       	subi	r16, 0xA7	; 167
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	1f c0       	rjmp	.+62     	; 0x1654 <LCD_displayCharacter+0x146>
    1616:	fe 01       	movw	r30, r28
    1618:	e9 5a       	subi	r30, 0xA9	; 169
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e9 5a       	subi	r30, 0xA9	; 169
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_displayCharacter+0x120>
    1632:	fe 01       	movw	r30, r28
    1634:	e9 5a       	subi	r30, 0xA9	; 169
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	de 01       	movw	r26, r28
    163e:	a7 5a       	subi	r26, 0xA7	; 167
    1640:	bf 4f       	sbci	r27, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e7 5a       	subi	r30, 0xA7	; 167
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	9c 93       	st	X, r25
    1652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	fe 01       	movw	r30, r28
    1656:	e7 5a       	subi	r30, 0xA7	; 167
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	d1 f6       	brne	.-76     	; 0x1616 <LCD_displayCharacter+0x108>
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	8e 01       	movw	r16, r28
    1666:	07 5a       	subi	r16, 0xA7	; 167
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e5 5a       	subi	r30, 0xA5	; 165
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	de 01       	movw	r26, r28
    1688:	ab 5a       	subi	r26, 0xAB	; 171
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e7 5a       	subi	r30, 0xA7	; 167
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	8d 93       	st	X+, r24
    1698:	9c 93       	st	X, r25
    169a:	fe 01       	movw	r30, r28
    169c:	eb 5a       	subi	r30, 0xAB	; 171
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_displayCharacter+0x196>
    16a8:	fe 01       	movw	r30, r28
    16aa:	eb 5a       	subi	r30, 0xAB	; 171
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    _delay_ms(1);
    SET_BIT(LCD_CTRL_PORT, E);
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	84 60       	ori	r24, 0x04	; 4
    16be:	8c 93       	st	X, r24
    16c0:	fe 01       	movw	r30, r28
    16c2:	ef 5a       	subi	r30, 0xAF	; 175
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e8       	ldi	r26, 0x80	; 128
    16cc:	bf e3       	ldi	r27, 0x3F	; 63
    16ce:	80 83       	st	Z, r24
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d6:	8e 01       	movw	r16, r28
    16d8:	03 5b       	subi	r16, 0xB3	; 179
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	ef 5a       	subi	r30, 0xAF	; 175
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	53 e4       	ldi	r21, 0x43	; 67
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	a2 83       	std	Z+2, r26	; 0x02
    1702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1704:	fe 01       	movw	r30, r28
    1706:	e3 5b       	subi	r30, 0xB3	; 179
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	44 f4       	brge	.+16     	; 0x1732 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1722:	fe 01       	movw	r30, r28
    1724:	e5 5b       	subi	r30, 0xB5	; 181
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	64 c0       	rjmp	.+200    	; 0x17fa <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1732:	fe 01       	movw	r30, r28
    1734:	e3 5b       	subi	r30, 0xB3	; 179
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	0c f0       	brlt	.+2      	; 0x1752 <LCD_displayCharacter+0x244>
    1750:	43 c0       	rjmp	.+134    	; 0x17d8 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	fe 01       	movw	r30, r28
    1754:	ef 5a       	subi	r30, 0xAF	; 175
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8e 01       	movw	r16, r28
    1772:	05 5b       	subi	r16, 0xB5	; 181
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	f8 01       	movw	r30, r16
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	1f c0       	rjmp	.+62     	; 0x17c8 <LCD_displayCharacter+0x2ba>
    178a:	fe 01       	movw	r30, r28
    178c:	e7 5b       	subi	r30, 0xB7	; 183
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	89 e1       	ldi	r24, 0x19	; 25
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5b       	subi	r30, 0xB7	; 183
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_displayCharacter+0x294>
    17a6:	fe 01       	movw	r30, r28
    17a8:	e7 5b       	subi	r30, 0xB7	; 183
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	de 01       	movw	r26, r28
    17b2:	a5 5b       	subi	r26, 0xB5	; 181
    17b4:	bf 4f       	sbci	r27, 0xFF	; 255
    17b6:	fe 01       	movw	r30, r28
    17b8:	e5 5b       	subi	r30, 0xB5	; 181
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	9c 93       	st	X, r25
    17c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e5 5b       	subi	r30, 0xB5	; 181
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	d1 f6       	brne	.-76     	; 0x178a <LCD_displayCharacter+0x27c>
    17d6:	27 c0       	rjmp	.+78     	; 0x1826 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	8e 01       	movw	r16, r28
    17da:	05 5b       	subi	r16, 0xB5	; 181
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	fe 01       	movw	r30, r28
    17e0:	e3 5b       	subi	r30, 0xB3	; 179
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	de 01       	movw	r26, r28
    17fc:	a9 5b       	subi	r26, 0xB9	; 185
    17fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1800:	fe 01       	movw	r30, r28
    1802:	e5 5b       	subi	r30, 0xB5	; 181
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	8d 93       	st	X+, r24
    180c:	9c 93       	st	X, r25
    180e:	fe 01       	movw	r30, r28
    1810:	e9 5b       	subi	r30, 0xB9	; 185
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_displayCharacter+0x30a>
    181c:	fe 01       	movw	r30, r28
    181e:	e9 5b       	subi	r30, 0xB9	; 185
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24
    _delay_ms(1);
    #if (DATA_BITS_MODE == 4)
        #ifdef UPPER_PORT_PINS
            LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
        #else
            LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1826:	ab e3       	ldi	r26, 0x3B	; 59
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	eb e3       	ldi	r30, 0x3B	; 59
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	98 2f       	mov	r25, r24
    1832:	90 7f       	andi	r25, 0xF0	; 240
    1834:	fe 01       	movw	r30, r28
    1836:	ed 59       	subi	r30, 0x9D	; 157
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	82 95       	swap	r24
    183e:	8f 70       	andi	r24, 0x0F	; 15
    1840:	89 2b       	or	r24, r25
    1842:	8c 93       	st	X, r24
    1844:	fe 01       	movw	r30, r28
    1846:	ed 5b       	subi	r30, 0xBD	; 189
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e8       	ldi	r26, 0x80	; 128
    1850:	bf e3       	ldi	r27, 0x3F	; 63
    1852:	80 83       	st	Z, r24
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	a2 83       	std	Z+2, r26	; 0x02
    1858:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	8e 01       	movw	r16, r28
    185c:	01 5c       	subi	r16, 0xC1	; 193
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	fe 01       	movw	r30, r28
    1862:	ed 5b       	subi	r30, 0xBD	; 189
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a e7       	ldi	r20, 0x7A	; 122
    1874:	53 e4       	ldi	r21, 0x43	; 67
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	f8 01       	movw	r30, r16
    1880:	80 83       	st	Z, r24
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	a2 83       	std	Z+2, r26	; 0x02
    1886:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1888:	fe 01       	movw	r30, r28
    188a:	ff 96       	adiw	r30, 0x3f	; 63
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9e af       	std	Y+62, r25	; 0x3e
    18aa:	8d af       	std	Y+61, r24	; 0x3d
    18ac:	46 c0       	rjmp	.+140    	; 0x193a <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    18ae:	fe 01       	movw	r30, r28
    18b0:	ff 96       	adiw	r30, 0x3f	; 63
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	64 f5       	brge	.+88     	; 0x1922 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	fe 01       	movw	r30, r28
    18cc:	ed 5b       	subi	r30, 0xBD	; 189
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e2       	ldi	r20, 0x20	; 32
    18de:	51 e4       	ldi	r21, 0x41	; 65
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	cd 01       	movw	r24, r26
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	9e af       	std	Y+62, r25	; 0x3e
    18f6:	8d af       	std	Y+61, r24	; 0x3d
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <LCD_displayCharacter+0x40a>
    18fa:	89 e1       	ldi	r24, 0x19	; 25
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9c af       	std	Y+60, r25	; 0x3c
    1900:	8b af       	std	Y+59, r24	; 0x3b
    1902:	8b ad       	ldd	r24, Y+59	; 0x3b
    1904:	9c ad       	ldd	r25, Y+60	; 0x3c
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <LCD_displayCharacter+0x3f8>
    190a:	9c af       	std	Y+60, r25	; 0x3c
    190c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1910:	9e ad       	ldd	r25, Y+62	; 0x3e
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	9e af       	std	Y+62, r25	; 0x3e
    1916:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	8d ad       	ldd	r24, Y+61	; 0x3d
    191a:	9e ad       	ldd	r25, Y+62	; 0x3e
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	69 f7       	brne	.-38     	; 0x18fa <LCD_displayCharacter+0x3ec>
    1920:	16 c0       	rjmp	.+44     	; 0x194e <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	fe 01       	movw	r30, r28
    1924:	ff 96       	adiw	r30, 0x3f	; 63
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9e af       	std	Y+62, r25	; 0x3e
    1938:	8d af       	std	Y+61, r24	; 0x3d
    193a:	8d ad       	ldd	r24, Y+61	; 0x3d
    193c:	9e ad       	ldd	r25, Y+62	; 0x3e
    193e:	9a af       	std	Y+58, r25	; 0x3a
    1940:	89 af       	std	Y+57, r24	; 0x39
    1942:	89 ad       	ldd	r24, Y+57	; 0x39
    1944:	9a ad       	ldd	r25, Y+58	; 0x3a
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_displayCharacter+0x438>
    194a:	9a af       	std	Y+58, r25	; 0x3a
    194c:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
    194e:	a8 e3       	ldi	r26, 0x38	; 56
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e8 e3       	ldi	r30, 0x38	; 56
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8b 7f       	andi	r24, 0xFB	; 251
    195a:	8c 93       	st	X, r24
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e8       	ldi	r26, 0x80	; 128
    1962:	bf e3       	ldi	r27, 0x3F	; 63
    1964:	8d ab       	std	Y+53, r24	; 0x35
    1966:	9e ab       	std	Y+54, r25	; 0x36
    1968:	af ab       	std	Y+55, r26	; 0x37
    196a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6d a9       	ldd	r22, Y+53	; 0x35
    196e:	7e a9       	ldd	r23, Y+54	; 0x36
    1970:	8f a9       	ldd	r24, Y+55	; 0x37
    1972:	98 ad       	ldd	r25, Y+56	; 0x38
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	53 e4       	ldi	r21, 0x43	; 67
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	89 ab       	std	Y+49, r24	; 0x31
    1986:	9a ab       	std	Y+50, r25	; 0x32
    1988:	ab ab       	std	Y+51, r26	; 0x33
    198a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    198c:	69 a9       	ldd	r22, Y+49	; 0x31
    198e:	7a a9       	ldd	r23, Y+50	; 0x32
    1990:	8b a9       	ldd	r24, Y+51	; 0x33
    1992:	9c a9       	ldd	r25, Y+52	; 0x34
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	98 ab       	std	Y+48, r25	; 0x30
    19aa:	8f a7       	std	Y+47, r24	; 0x2f
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6d a9       	ldd	r22, Y+53	; 0x35
    19c8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ca:	8f a9       	ldd	r24, Y+55	; 0x37
    19cc:	98 ad       	ldd	r25, Y+56	; 0x38
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <LCD_displayCharacter+0x500>
    19f0:	89 e1       	ldi	r24, 0x19	; 25
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9e a7       	std	Y+46, r25	; 0x2e
    19f6:	8d a7       	std	Y+45, r24	; 0x2d
    19f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_displayCharacter+0x4ee>
    1a00:	9e a7       	std	Y+46, r25	; 0x2e
    1a02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a06:	98 a9       	ldd	r25, Y+48	; 0x30
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a10:	98 a9       	ldd	r25, Y+48	; 0x30
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <LCD_displayCharacter+0x4e2>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	69 a9       	ldd	r22, Y+49	; 0x31
    1a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	98 ab       	std	Y+48, r25	; 0x30
    1a2a:	8f a7       	std	Y+47, r24	; 0x2f
    1a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a30:	9c a7       	std	Y+44, r25	; 0x2c
    1a32:	8b a7       	std	Y+43, r24	; 0x2b
    1a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <LCD_displayCharacter+0x52a>
    1a3c:	9c a7       	std	Y+44, r25	; 0x2c
    1a3e:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1);
        SET_BIT(LCD_CTRL_PORT, E);
    1a40:	a8 e3       	ldi	r26, 0x38	; 56
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	84 60       	ori	r24, 0x04	; 4
    1a4c:	8c 93       	st	X, r24
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e8       	ldi	r26, 0x80	; 128
    1a54:	bf e3       	ldi	r27, 0x3F	; 63
    1a56:	8f a3       	std	Y+39, r24	; 0x27
    1a58:	98 a7       	std	Y+40, r25	; 0x28
    1a5a:	a9 a7       	std	Y+41, r26	; 0x29
    1a5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a60:	78 a5       	ldd	r23, Y+40	; 0x28
    1a62:	89 a5       	ldd	r24, Y+41	; 0x29
    1a64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a e7       	ldi	r20, 0x7A	; 122
    1a6c:	53 e4       	ldi	r21, 0x43	; 67
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8b a3       	std	Y+35, r24	; 0x23
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	ad a3       	std	Y+37, r26	; 0x25
    1a7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_displayCharacter+0x592>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9a a3       	std	Y+34, r25	; 0x22
    1a9c:	89 a3       	std	Y+33, r24	; 0x21
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aba:	78 a5       	ldd	r23, Y+40	; 0x28
    1abc:	89 a5       	ldd	r24, Y+41	; 0x29
    1abe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_displayCharacter+0x5f2>
    1ae2:	89 e1       	ldi	r24, 0x19	; 25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	98 a3       	std	Y+32, r25	; 0x20
    1ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aec:	98 a1       	ldd	r25, Y+32	; 0x20
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_displayCharacter+0x5e0>
    1af2:	98 a3       	std	Y+32, r25	; 0x20
    1af4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	89 a1       	ldd	r24, Y+33	; 0x21
    1af8:	9a a1       	ldd	r25, Y+34	; 0x22
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_displayCharacter+0x5d4>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b10:	9e a1       	ldd	r25, Y+38	; 0x26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	9e 8f       	std	Y+30, r25	; 0x1e
    1b24:	8d 8f       	std	Y+29, r24	; 0x1d
    1b26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_displayCharacter+0x61c>
    1b2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b30:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1);
        #ifdef UPPER_PORT_PINS
            LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
        #else
            LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	90 7f       	andi	r25, 0xF0	; 240
    1b40:	fe 01       	movw	r30, r28
    1b42:	ed 59       	subi	r30, 0x9D	; 157
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 70       	andi	r24, 0x0F	; 15
    1b4a:	89 2b       	or	r24, r25
    1b4c:	8c 93       	st	X, r24
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	89 8f       	std	Y+25, r24	; 0x19
    1b58:	9a 8f       	std	Y+26, r25	; 0x1a
    1b5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a e7       	ldi	r20, 0x7A	; 122
    1b6c:	53 e4       	ldi	r21, 0x43	; 67
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8d 8b       	std	Y+21, r24	; 0x15
    1b78:	9e 8b       	std	Y+22, r25	; 0x16
    1b7a:	af 8b       	std	Y+23, r26	; 0x17
    1b7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b80:	7e 89       	ldd	r23, Y+22	; 0x16
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <LCD_displayCharacter+0x692>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	8b 8b       	std	Y+19, r24	; 0x13
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9c 8b       	std	Y+20, r25	; 0x14
    1bde:	8b 8b       	std	Y+19, r24	; 0x13
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <LCD_displayCharacter+0x6f2>
    1be2:	89 e1       	ldi	r24, 0x19	; 25
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9a 8b       	std	Y+18, r25	; 0x12
    1be8:	89 8b       	std	Y+17, r24	; 0x11
    1bea:	89 89       	ldd	r24, Y+17	; 0x11
    1bec:	9a 89       	ldd	r25, Y+18	; 0x12
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <LCD_displayCharacter+0x6e0>
    1bf2:	9a 8b       	std	Y+18, r25	; 0x12
    1bf4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9c 8b       	std	Y+20, r25	; 0x14
    1bfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8b 89       	ldd	r24, Y+19	; 0x13
    1c02:	9c 89       	ldd	r25, Y+20	; 0x14
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <LCD_displayCharacter+0x6d4>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c10:	98 8d       	ldd	r25, Y+24	; 0x18
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9c 8b       	std	Y+20, r25	; 0x14
    1c1c:	8b 8b       	std	Y+19, r24	; 0x13
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	98 8b       	std	Y+16, r25	; 0x10
    1c24:	8f 87       	std	Y+15, r24	; 0x0f
    1c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c28:	98 89       	ldd	r25, Y+16	; 0x10
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x71c>
    1c2e:	98 8b       	std	Y+16, r25	; 0x10
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
    1c32:	a8 e3       	ldi	r26, 0x38	; 56
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e8 e3       	ldi	r30, 0x38	; 56
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8b 7f       	andi	r24, 0xFB	; 251
    1c3e:	8c 93       	st	X, r24
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a0 e8       	ldi	r26, 0x80	; 128
    1c46:	bf e3       	ldi	r27, 0x3F	; 63
    1c48:	8b 87       	std	Y+11, r24	; 0x0b
    1c4a:	9c 87       	std	Y+12, r25	; 0x0c
    1c4c:	ad 87       	std	Y+13, r26	; 0x0d
    1c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a e7       	ldi	r20, 0x7A	; 122
    1c5e:	53 e4       	ldi	r21, 0x43	; 67
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8f 83       	std	Y+7, r24	; 0x07
    1c6a:	98 87       	std	Y+8, r25	; 0x08
    1c6c:	a9 87       	std	Y+9, r26	; 0x09
    1c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e8       	ldi	r20, 0x80	; 128
    1c7e:	5f e3       	ldi	r21, 0x3F	; 63
    1c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c84:	88 23       	and	r24, r24
    1c86:	2c f4       	brge	.+10     	; 0x1c92 <LCD_displayCharacter+0x784>
		__ticks = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	3f c0       	rjmp	.+126    	; 0x1d10 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	3f ef       	ldi	r19, 0xFF	; 255
    1c9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ca0:	57 e4       	ldi	r21, 0x47	; 71
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca6:	18 16       	cp	r1, r24
    1ca8:	4c f5       	brge	.+82     	; 0x1cfc <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e2       	ldi	r20, 0x20	; 32
    1cb8:	51 e4       	ldi	r21, 0x41	; 65
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	0f c0       	rjmp	.+30     	; 0x1cf2 <LCD_displayCharacter+0x7e4>
    1cd4:	89 e1       	ldi	r24, 0x19	; 25
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_displayCharacter+0x7d2>
    1ce4:	9c 83       	std	Y+4, r25	; 0x04
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <LCD_displayCharacter+0x7c6>
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	9a 83       	std	Y+2, r25	; 0x02
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_displayCharacter+0x80e>
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA_PORT = data;
        _delay_ms(1);
        CLEAR_BIT(LCD_CTRL_PORT, E);
        _delay_ms(1);
    #endif
}
    1d24:	cd 59       	subi	r28, 0x9D	; 157
    1d26:	df 4f       	sbci	r29, 0xFF	; 255
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	08 95       	ret

00001d3c <LCD_displayString>:
 *
 * This function displays a null-terminated string on the LCD.
 *
 * @param Str The string to display.
 */
void LCD_displayString(const char *Str) {
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <LCD_displayString+0x6>
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9b 83       	std	Y+3, r25	; 0x03
    1d4a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <LCD_displayString+0x30>
    while (Str[i] != '\0') {
        LCD_displayCharacter(Str[i]);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	80 81       	ld	r24, Z
    1d62:	0e 94 87 0a 	call	0x150e	; 0x150e <LCD_displayCharacter>
        i++;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	89 83       	std	Y+1, r24	; 0x01
 *
 * @param Str The string to display.
 */
void LCD_displayString(const char *Str) {
    uint8 i = 0;
    while (Str[i] != '\0') {
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	9b 81       	ldd	r25, Y+3	; 0x03
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 23       	and	r24, r24
    1d80:	39 f7       	brne	.-50     	; 0x1d50 <LCD_displayString+0x14>
        LCD_displayCharacter(Str[i]);
        i++;
    }
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <LCD_goToRowColumn>:
 * This function moves the cursor to a specified row and column on the LCD.
 *
 * @param row The row number (0-1).
 * @param col The column number (0-15).
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <LCD_goToRowColumn+0x6>
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <LCD_goToRowColumn+0x8>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	6b 83       	std	Y+3, r22	; 0x03
    uint8 Address;
    switch (row) {
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	3d 83       	std	Y+5, r19	; 0x05
    1da8:	2c 83       	std	Y+4, r18	; 0x04
    1daa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dac:	9d 81       	ldd	r25, Y+5	; 0x05
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	c1 f0       	breq	.+48     	; 0x1de4 <LCD_goToRowColumn+0x56>
    1db4:	2c 81       	ldd	r18, Y+4	; 0x04
    1db6:	3d 81       	ldd	r19, Y+5	; 0x05
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	31 05       	cpc	r19, r1
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_goToRowColumn+0x3a>
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <LCD_goToRowColumn+0x50>
    1dc6:	19 c0       	rjmp	.+50     	; 0x1dfa <LCD_goToRowColumn+0x6c>
    1dc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dca:	3d 81       	ldd	r19, Y+5	; 0x05
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	69 f0       	breq	.+26     	; 0x1dec <LCD_goToRowColumn+0x5e>
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	83 30       	cpi	r24, 0x03	; 3
    1dd8:	91 05       	cpc	r25, r1
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <LCD_goToRowColumn+0x66>
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <LCD_goToRowColumn+0x6c>
        case 0:
            Address = col;
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	0b c0       	rjmp	.+22     	; 0x1dfa <LCD_goToRowColumn+0x6c>
            break;
        case 1:
            Address = col + 0x40;
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	80 5c       	subi	r24, 0xC0	; 192
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <LCD_goToRowColumn+0x6c>
            break;
        case 2:
            Address = col + 0x10;
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	80 5f       	subi	r24, 0xF0	; 240
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	03 c0       	rjmp	.+6      	; 0x1dfa <LCD_goToRowColumn+0x6c>
            break;
        case 3:
            Address = col + 0x50;
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	80 5b       	subi	r24, 0xB0	; 176
    1df8:	89 83       	std	Y+1, r24	; 0x01
            break;
    }
    LCD_sendCommand(SET_DDRAM_ADDRESS | Address);
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	80 68       	ori	r24, 0x80	; 128
    1dfe:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <LCD_displayStringRowColum>:
 *
 * @param row The row number (0-1).
 * @param col The column number (0-15).
 * @param Str The string to display.
 */
void LCD_displayStringRowColum(uint8 row, uint8 col, const char *Str) {
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_displayStringRowColum+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <LCD_displayStringRowColum+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	6a 83       	std	Y+2, r22	; 0x02
    1e22:	5c 83       	std	Y+4, r21	; 0x04
    1e24:	4b 83       	std	Y+3, r20	; 0x03
    LCD_goToRowColumn(row, col);
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	6a 81       	ldd	r22, Y+2	; 0x02
    1e2a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_goToRowColumn>
    LCD_displayString(Str);
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <LCD_intgerToString>:
 *
 * This function converts an integer to a string and displays it on the LCD.
 *
 * @param data The integer to display.
 */
void LCD_intgerToString(int data) {
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	62 97       	sbiw	r28, 0x12	; 18
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	9a 8b       	std	Y+18, r25	; 0x12
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
    char buff[16];
    itoa(data, buff, 10);
    1e5c:	89 89       	ldd	r24, Y+17	; 0x11
    1e5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e60:	9e 01       	movw	r18, r28
    1e62:	2f 5f       	subi	r18, 0xFF	; 255
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	b9 01       	movw	r22, r18
    1e68:	4a e0       	ldi	r20, 0x0A	; 10
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	0e 94 cf 11 	call	0x239e	; 0x239e <itoa>
    LCD_displayString(buff);
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>
}
    1e78:	62 96       	adiw	r28, 0x12	; 18
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <LCD_doubleToString>:
 * This function converts a double to a string and displays it on the LCD.
 * It displays up to two decimal places.
 *
 * @param data The double to display.
 */
void LCD_doubleToString(double data) {
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	6c 97       	sbiw	r28, 0x1c	; 28
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	69 8f       	std	Y+25, r22	; 0x19
    1ea0:	7a 8f       	std	Y+26, r23	; 0x1a
    1ea2:	8b 8f       	std	Y+27, r24	; 0x1b
    1ea4:	9c 8f       	std	Y+28, r25	; 0x1c
    int32_t intPart = (int32_t)data;  ///< Integer part
    1ea6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eae:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	af 83       	std	Y+7, r26	; 0x07
    1ebc:	b8 87       	std	Y+8, r27	; 0x08
    int32_t fracPart = (int32_t)((data - intPart) * 100.0);  ///< Assuming 2 decimal places
    1ebe:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec4:	98 85       	ldd	r25, Y+8	; 0x08
    1ec6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1eca:	9b 01       	movw	r18, r22
    1ecc:	ac 01       	movw	r20, r24
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	48 ec       	ldi	r20, 0xC8	; 200
    1ee8:	52 e4       	ldi	r21, 0x42	; 66
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	ab 83       	std	Y+3, r26	; 0x03
    1f04:	bc 83       	std	Y+4, r27	; 0x04

    char buff[16];
    sprintf(buff, "%ld.%02ld", intPart, fracPart);
    1f06:	8d b7       	in	r24, 0x3d	; 61
    1f08:	9e b7       	in	r25, 0x3e	; 62
    1f0a:	0c 97       	sbiw	r24, 0x0c	; 12
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	9e bf       	out	0x3e, r25	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	8d bf       	out	0x3d, r24	; 61
    1f16:	ed b7       	in	r30, 0x3d	; 61
    1f18:	fe b7       	in	r31, 0x3e	; 62
    1f1a:	31 96       	adiw	r30, 0x01	; 1
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	09 96       	adiw	r24, 0x09	; 9
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	80 e6       	ldi	r24, 0x60	; 96
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	93 83       	std	Z+3, r25	; 0x03
    1f2a:	82 83       	std	Z+2, r24	; 0x02
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	af 81       	ldd	r26, Y+7	; 0x07
    1f32:	b8 85       	ldd	r27, Y+8	; 0x08
    1f34:	84 83       	std	Z+4, r24	; 0x04
    1f36:	95 83       	std	Z+5, r25	; 0x05
    1f38:	a6 83       	std	Z+6, r26	; 0x06
    1f3a:	b7 83       	std	Z+7, r27	; 0x07
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	ab 81       	ldd	r26, Y+3	; 0x03
    1f42:	bc 81       	ldd	r27, Y+4	; 0x04
    1f44:	80 87       	std	Z+8, r24	; 0x08
    1f46:	91 87       	std	Z+9, r25	; 0x09
    1f48:	a2 87       	std	Z+10, r26	; 0x0a
    1f4a:	b3 87       	std	Z+11, r27	; 0x0b
    1f4c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <sprintf>
    1f50:	8d b7       	in	r24, 0x3d	; 61
    1f52:	9e b7       	in	r25, 0x3e	; 62
    1f54:	0c 96       	adiw	r24, 0x0c	; 12
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	9e bf       	out	0x3e, r25	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	8d bf       	out	0x3d, r24	; 61
    LCD_displayString(buff);
    1f60:	ce 01       	movw	r24, r28
    1f62:	09 96       	adiw	r24, 0x09	; 9
    1f64:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>
}
    1f68:	6c 96       	adiw	r28, 0x1c	; 28
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <LCD_clearScreen>:
/**
 * @brief Clear the LCD screen.
 *
 * This function clears the LCD screen.
 */
void LCD_clearScreen(void) {
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    LCD_sendCommand(CLEAR_DISPLAY);
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	0e 94 70 06 	call	0xce0	; 0xce0 <LCD_sendCommand>
}
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <timer0_init>:
/**
 * @brief Initialize Timer0.
 *
 * This function initializes Timer0 for generating a delay.
 */
void timer0_init() {
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << CS00);  // Set prescaler to 1
    1f96:	a3 e5       	ldi	r26, 0x53	; 83
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e3 e5       	ldi	r30, 0x53	; 83
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	81 60       	ori	r24, 0x01	; 1
    1fa2:	8c 93       	st	X, r24
    TCNT0 = 0;             // Initialize counter value
    1fa4:	e2 e5       	ldi	r30, 0x52	; 82
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	10 82       	st	Z, r1
    TIMSK |= (1 << TOIE0); // Enable Timer0 overflow interrupt
    1faa:	a9 e5       	ldi	r26, 0x59	; 89
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e9 e5       	ldi	r30, 0x59	; 89
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	81 60       	ori	r24, 0x01	; 1
    1fb6:	8c 93       	st	X, r24
    sei();                 // Enable global interrupts
    1fb8:	78 94       	sei
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <delay_ms>:
 *
 * This function generates a delay in milliseconds using Timer0.
 *
 * @param milliseconds The duration of the delay in milliseconds.
 */
void delay_ms(uint16_t milliseconds) {
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <delay_ms+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <delay_ms+0x8>
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	8b 83       	std	Y+3, r24	; 0x03
    // Calculate the number of ticks required for the given milliseconds
    uint16_t ticks = milliseconds * (F_CPU / 1000) / 256;
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	cc 01       	movw	r24, r24
    1fd6:	a0 e0       	ldi	r26, 0x00	; 0
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	28 ee       	ldi	r18, 0xE8	; 232
    1fdc:	33 e0       	ldi	r19, 0x03	; 3
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__mulsi3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	89 2f       	mov	r24, r25
    1ff0:	9a 2f       	mov	r25, r26
    1ff2:	ab 2f       	mov	r26, r27
    1ff4:	bb 27       	eor	r27, r27
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	89 83       	std	Y+1, r24	; 0x01

    // Reset Timer0 ticks
    timer0_ticks = 0;
    1ffa:	10 92 a0 01 	sts	0x01A0, r1
    1ffe:	10 92 9f 01 	sts	0x019F, r1

    // Wait until the required number of ticks have elapsed
    while (timer0_ticks < ticks);
    2002:	20 91 9f 01 	lds	r18, 0x019F
    2006:	30 91 a0 01 	lds	r19, 0x01A0
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	b8 f3       	brcs	.-18     	; 0x2002 <delay_ms+0x42>
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <__vector_9>:
/**
 * @brief Timer0 overflow interrupt service routine.
 *
 * This ISR increments the Timer0 ticks counter.
 */
ISR(TIMER0_OVF_vect) {
    2022:	1f 92       	push	r1
    2024:	0f 92       	push	r0
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	0f 92       	push	r0
    202a:	11 24       	eor	r1, r1
    202c:	8f 93       	push	r24
    202e:	9f 93       	push	r25
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    // Increment Timer0 ticks
    timer0_ticks++;
    2038:	80 91 9f 01 	lds	r24, 0x019F
    203c:	90 91 a0 01 	lds	r25, 0x01A0
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	90 93 a0 01 	sts	0x01A0, r25
    2046:	80 93 9f 01 	sts	0x019F, r24
}
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	9f 91       	pop	r25
    2050:	8f 91       	pop	r24
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <INT_int>:
 * @brief Initialize external interrupts INT0 and INT1.
 *
 * This function sets up external interrupts on PD2 (INT0) and PD3 (INT1) with internal pull-up
 * resistors and triggers them on the falling edge.
 */
void INT_int() {
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    DDRD &= ~(1 << PD2) & ~(1 << PD3);  ///< Set PD2 and PD3 as inputs
    2064:	a1 e3       	ldi	r26, 0x31	; 49
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e1 e3       	ldi	r30, 0x31	; 49
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	83 7f       	andi	r24, 0xF3	; 243
    2070:	8c 93       	st	X, r24
    PORTD |= (1 << PD2) | (1 << PD3);   ///< Enable internal pull-up resistors for PD2 and PD3
    2072:	a2 e3       	ldi	r26, 0x32	; 50
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8c 60       	ori	r24, 0x0C	; 12
    207e:	8c 93       	st	X, r24
    GICR |= (1 << INT0) | (1 << INT1);  ///< Enable external interrupts INT0 and INT1
    2080:	ab e5       	ldi	r26, 0x5B	; 91
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	eb e5       	ldi	r30, 0x5B	; 91
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	80 6c       	ori	r24, 0xC0	; 192
    208c:	8c 93       	st	X, r24

    MCUCR |= (1 << ISC01);  ///< Trigger INT0 on falling edge
    208e:	a5 e5       	ldi	r26, 0x55	; 85
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e5 e5       	ldi	r30, 0x55	; 85
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	82 60       	ori	r24, 0x02	; 2
    209a:	8c 93       	st	X, r24
    MCUCR |= (1 << ISC11);  ///< Trigger INT1 on falling edge
    209c:	a5 e5       	ldi	r26, 0x55	; 85
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e5       	ldi	r30, 0x55	; 85
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	88 60       	ori	r24, 0x08	; 8
    20a8:	8c 93       	st	X, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <__vector_1>:
/**
 * @brief Interrupt Service Routine for INT0 (PD2).
 *
 * This ISR toggles the motor direction when the button connected to PD2 is pressed.
 */
ISR(INT0_vect) {
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	8f 93       	push	r24
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    MotorDirection = (MotorDirection == CW) ? CCW : CW; ///< Toggle motor direction
    20c6:	80 91 8f 01 	lds	r24, 0x018F
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <__vector_1+0x24>
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	80 93 8f 01 	sts	0x018F, r24
}
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	8f 91       	pop	r24
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_2>:
 * @brief Interrupt Service Routine for INT1 (PD3).
 *
 * This ISR toggles the stepping mode between full step and half step when the button
 * connected to PD3 is pressed.
 */
ISR(INT1_vect) {
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	8f 93       	push	r24
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	0f 92       	push	r0
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    StepMode = (StepMode == 0) ? 1 : 0; ///< Toggle stepping mode
    2102:	80 91 9e 01 	lds	r24, 0x019E
    2106:	19 82       	std	Y+1, r1	; 0x01
    2108:	88 23       	and	r24, r24
    210a:	11 f4       	brne	.+4      	; 0x2110 <__vector_2+0x24>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	80 93 9e 01 	sts	0x019E, r24
}
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	8f 91       	pop	r24
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti

00002128 <updateLCD>:
 * @brief Update the LCD display with the current motor direction and step mode.
 *
 * @param direction The current motor direction.
 * @param mode The current step mode.
 */
void updateLCD(uint8 direction, uint8 mode) {
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <updateLCD+0x6>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <updateLCD+0x8>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <updateLCD+0xa>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	6a 83       	std	Y+2, r22	; 0x02
    static uint8 prevDirection = -1;
    static uint8 prevMode = -1;

    if (direction != prevDirection || mode != prevMode) {
    213a:	90 91 9d 01 	lds	r25, 0x019D
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	89 17       	cp	r24, r25
    2142:	29 f4       	brne	.+10     	; 0x214e <updateLCD+0x26>
    2144:	90 91 9c 01 	lds	r25, 0x019C
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	89 17       	cp	r24, r25
    214c:	c1 f1       	breq	.+112    	; 0x21be <updateLCD+0x96>
        LCD_clearScreen();
    214e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_clearScreen>
        LCD_goToRowColumn(0, 0);
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_goToRowColumn>
        LCD_displayString("Dir:");
    215a:	8a e6       	ldi	r24, 0x6A	; 106
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>
        LCD_displayString((direction == CW) ? "CW " : "CCW");
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	29 f4       	brne	.+10     	; 0x2172 <updateLCD+0x4a>
    2168:	8f e6       	ldi	r24, 0x6F	; 111
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
    2170:	04 c0       	rjmp	.+8      	; 0x217a <updateLCD+0x52>
    2172:	83 e7       	ldi	r24, 0x73	; 115
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>

        LCD_goToRowColumn(1, 0);
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_goToRowColumn>
        LCD_displayString("Mode:");
    218a:	87 e7       	ldi	r24, 0x77	; 119
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>
        LCD_displayString((mode == 0) ? "Full" : "Half");
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 23       	and	r24, r24
    2196:	29 f4       	brne	.+10     	; 0x21a2 <updateLCD+0x7a>
    2198:	8d e7       	ldi	r24, 0x7D	; 125
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <updateLCD+0x82>
    21a2:	82 e8       	ldi	r24, 0x82	; 130
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LCD_displayString>

        prevDirection = direction;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	80 93 9d 01 	sts	0x019D, r24
        prevMode = mode;
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	80 93 9c 01 	sts	0x019C, r24
    }
}
    21be:	26 96       	adiw	r28, 0x06	; 6
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <main>:
 * This function initializes the motor control, sets up the interrupts, and enters a loop
 * that controls the motor based on the current direction and stepping mode.
 *
 * @return int This function does not return.
 */
int main(void) {
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	28 97       	sbiw	r28, 0x08	; 8
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    DDRC = 0xFF;  ///< Set PORTC as output for motor control
    21e4:	e4 e3       	ldi	r30, 0x34	; 52
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	80 83       	st	Z, r24
    LCD_init();   ///< Initialize the LCD
    21ec:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_init>
    INT_int();    ///< Initialize external interrupts
    21f0:	0e 94 2e 10 	call	0x205c	; 0x205c <INT_int>
    timer0_init(); ///< Initialize Timer0 for delay
    21f4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <timer0_init>

    uint8 stepIndex = 0; ///< Index to track the current step in the sequence
    21f8:	1c 82       	std	Y+4, r1	; 0x04

    while (1) {
        const uint8* sequence = (StepMode == 0) ? FULL_WAVE_motor_steps : HALF_WAVE_motor_steps; ///< Select step sequence based on mode
    21fa:	80 91 9e 01 	lds	r24, 0x019E
    21fe:	88 23       	and	r24, r24
    2200:	29 f4       	brne	.+10     	; 0x220c <main+0x3c>
    2202:	80 e9       	ldi	r24, 0x90	; 144
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	98 87       	std	Y+8, r25	; 0x08
    2208:	8f 83       	std	Y+7, r24	; 0x07
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <main+0x44>
    220c:	84 e9       	ldi	r24, 0x94	; 148
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	98 87       	std	Y+8, r25	; 0x08
    2212:	8f 83       	std	Y+7, r24	; 0x07
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	98 85       	ldd	r25, Y+8	; 0x08
    2218:	9b 83       	std	Y+3, r25	; 0x03
    221a:	8a 83       	std	Y+2, r24	; 0x02
        uint8 steps = (StepMode == 0) ? FULL_WAVE_STEPS : HALF_WAVE_STEPS; ///< Determine number of steps based on mode
    221c:	80 91 9e 01 	lds	r24, 0x019E
    2220:	88 23       	and	r24, r24
    2222:	19 f4       	brne	.+6      	; 0x222a <main+0x5a>
    2224:	94 e0       	ldi	r25, 0x04	; 4
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	02 c0       	rjmp	.+4      	; 0x222e <main+0x5e>
    222a:	88 e0       	ldi	r24, 0x08	; 8
    222c:	8e 83       	std	Y+6, r24	; 0x06
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	99 83       	std	Y+1, r25	; 0x01
        PORTC = sequence[stepIndex]; ///< Set motor control pins to the current step value
    2232:	a5 e3       	ldi	r26, 0x35	; 53
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	9b 81       	ldd	r25, Y+3	; 0x03
    2240:	fc 01       	movw	r30, r24
    2242:	e2 0f       	add	r30, r18
    2244:	f3 1f       	adc	r31, r19
    2246:	80 81       	ld	r24, Z
    2248:	8c 93       	st	X, r24

        // Increment or decrement stepIndex based on MotorDirection
        if (MotorDirection == CW) {
    224a:	80 91 8f 01 	lds	r24, 0x018F
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	79 f4       	brne	.+30     	; 0x2270 <main+0xa0>
            stepIndex = (stepIndex + 1) % steps;
    2252:	8c 81       	ldd	r24, Y+4	; 0x04
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	ac 01       	movw	r20, r24
    225a:	4f 5f       	subi	r20, 0xFF	; 255
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	ca 01       	movw	r24, r20
    2266:	b9 01       	movw	r22, r18
    2268:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__divmodhi4>
    226c:	8c 83       	std	Y+4, r24	; 0x04
    226e:	0e c0       	rjmp	.+28     	; 0x228c <main+0xbc>
        } else {
            stepIndex = (stepIndex == 0) ? steps - 1 : stepIndex - 1;
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	88 23       	and	r24, r24
    2274:	29 f4       	brne	.+10     	; 0x2280 <main+0xb0>
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	98 2f       	mov	r25, r24
    227a:	91 50       	subi	r25, 0x01	; 1
    227c:	9d 83       	std	Y+5, r25	; 0x05
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <main+0xb8>
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	98 2f       	mov	r25, r24
    2284:	91 50       	subi	r25, 0x01	; 1
    2286:	9d 83       	std	Y+5, r25	; 0x05
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	8c 83       	std	Y+4, r24	; 0x04
        }

        updateLCD(MotorDirection, StepMode); ///< Update LCD with current direction and mode if changed
    228c:	80 91 8f 01 	lds	r24, 0x018F
    2290:	90 91 9e 01 	lds	r25, 0x019E
    2294:	69 2f       	mov	r22, r25
    2296:	0e 94 94 10 	call	0x2128	; 0x2128 <updateLCD>
        delay_ms(500); ///< Fixed delay for stepping speed
    229a:	84 ef       	ldi	r24, 0xF4	; 244
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <delay_ms>
    22a2:	ab cf       	rjmp	.-170    	; 0x21fa <main+0x2a>

000022a4 <__mulsi3>:
    22a4:	62 9f       	mul	r22, r18
    22a6:	d0 01       	movw	r26, r0
    22a8:	73 9f       	mul	r23, r19
    22aa:	f0 01       	movw	r30, r0
    22ac:	82 9f       	mul	r24, r18
    22ae:	e0 0d       	add	r30, r0
    22b0:	f1 1d       	adc	r31, r1
    22b2:	64 9f       	mul	r22, r20
    22b4:	e0 0d       	add	r30, r0
    22b6:	f1 1d       	adc	r31, r1
    22b8:	92 9f       	mul	r25, r18
    22ba:	f0 0d       	add	r31, r0
    22bc:	83 9f       	mul	r24, r19
    22be:	f0 0d       	add	r31, r0
    22c0:	74 9f       	mul	r23, r20
    22c2:	f0 0d       	add	r31, r0
    22c4:	65 9f       	mul	r22, r21
    22c6:	f0 0d       	add	r31, r0
    22c8:	99 27       	eor	r25, r25
    22ca:	72 9f       	mul	r23, r18
    22cc:	b0 0d       	add	r27, r0
    22ce:	e1 1d       	adc	r30, r1
    22d0:	f9 1f       	adc	r31, r25
    22d2:	63 9f       	mul	r22, r19
    22d4:	b0 0d       	add	r27, r0
    22d6:	e1 1d       	adc	r30, r1
    22d8:	f9 1f       	adc	r31, r25
    22da:	bd 01       	movw	r22, r26
    22dc:	cf 01       	movw	r24, r30
    22de:	11 24       	eor	r1, r1
    22e0:	08 95       	ret

000022e2 <__divmodhi4>:
    22e2:	97 fb       	bst	r25, 7
    22e4:	09 2e       	mov	r0, r25
    22e6:	07 26       	eor	r0, r23
    22e8:	0a d0       	rcall	.+20     	; 0x22fe <__divmodhi4_neg1>
    22ea:	77 fd       	sbrc	r23, 7
    22ec:	04 d0       	rcall	.+8      	; 0x22f6 <__divmodhi4_neg2>
    22ee:	0c d0       	rcall	.+24     	; 0x2308 <__udivmodhi4>
    22f0:	06 d0       	rcall	.+12     	; 0x22fe <__divmodhi4_neg1>
    22f2:	00 20       	and	r0, r0
    22f4:	1a f4       	brpl	.+6      	; 0x22fc <__divmodhi4_exit>

000022f6 <__divmodhi4_neg2>:
    22f6:	70 95       	com	r23
    22f8:	61 95       	neg	r22
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255

000022fc <__divmodhi4_exit>:
    22fc:	08 95       	ret

000022fe <__divmodhi4_neg1>:
    22fe:	f6 f7       	brtc	.-4      	; 0x22fc <__divmodhi4_exit>
    2300:	90 95       	com	r25
    2302:	81 95       	neg	r24
    2304:	9f 4f       	sbci	r25, 0xFF	; 255
    2306:	08 95       	ret

00002308 <__udivmodhi4>:
    2308:	aa 1b       	sub	r26, r26
    230a:	bb 1b       	sub	r27, r27
    230c:	51 e1       	ldi	r21, 0x11	; 17
    230e:	07 c0       	rjmp	.+14     	; 0x231e <__udivmodhi4_ep>

00002310 <__udivmodhi4_loop>:
    2310:	aa 1f       	adc	r26, r26
    2312:	bb 1f       	adc	r27, r27
    2314:	a6 17       	cp	r26, r22
    2316:	b7 07       	cpc	r27, r23
    2318:	10 f0       	brcs	.+4      	; 0x231e <__udivmodhi4_ep>
    231a:	a6 1b       	sub	r26, r22
    231c:	b7 0b       	sbc	r27, r23

0000231e <__udivmodhi4_ep>:
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	5a 95       	dec	r21
    2324:	a9 f7       	brne	.-22     	; 0x2310 <__udivmodhi4_loop>
    2326:	80 95       	com	r24
    2328:	90 95       	com	r25
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	08 95       	ret

00002330 <__prologue_saves__>:
    2330:	2f 92       	push	r2
    2332:	3f 92       	push	r3
    2334:	4f 92       	push	r4
    2336:	5f 92       	push	r5
    2338:	6f 92       	push	r6
    233a:	7f 92       	push	r7
    233c:	8f 92       	push	r8
    233e:	9f 92       	push	r9
    2340:	af 92       	push	r10
    2342:	bf 92       	push	r11
    2344:	cf 92       	push	r12
    2346:	df 92       	push	r13
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	ca 1b       	sub	r28, r26
    235a:	db 0b       	sbc	r29, r27
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	09 94       	ijmp

00002368 <__epilogue_restores__>:
    2368:	2a 88       	ldd	r2, Y+18	; 0x12
    236a:	39 88       	ldd	r3, Y+17	; 0x11
    236c:	48 88       	ldd	r4, Y+16	; 0x10
    236e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2370:	6e 84       	ldd	r6, Y+14	; 0x0e
    2372:	7d 84       	ldd	r7, Y+13	; 0x0d
    2374:	8c 84       	ldd	r8, Y+12	; 0x0c
    2376:	9b 84       	ldd	r9, Y+11	; 0x0b
    2378:	aa 84       	ldd	r10, Y+10	; 0x0a
    237a:	b9 84       	ldd	r11, Y+9	; 0x09
    237c:	c8 84       	ldd	r12, Y+8	; 0x08
    237e:	df 80       	ldd	r13, Y+7	; 0x07
    2380:	ee 80       	ldd	r14, Y+6	; 0x06
    2382:	fd 80       	ldd	r15, Y+5	; 0x05
    2384:	0c 81       	ldd	r16, Y+4	; 0x04
    2386:	1b 81       	ldd	r17, Y+3	; 0x03
    2388:	aa 81       	ldd	r26, Y+2	; 0x02
    238a:	b9 81       	ldd	r27, Y+1	; 0x01
    238c:	ce 0f       	add	r28, r30
    238e:	d1 1d       	adc	r29, r1
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	ed 01       	movw	r28, r26
    239c:	08 95       	ret

0000239e <itoa>:
    239e:	fb 01       	movw	r30, r22
    23a0:	9f 01       	movw	r18, r30
    23a2:	e8 94       	clt
    23a4:	42 30       	cpi	r20, 0x02	; 2
    23a6:	c4 f0       	brlt	.+48     	; 0x23d8 <itoa+0x3a>
    23a8:	45 32       	cpi	r20, 0x25	; 37
    23aa:	b4 f4       	brge	.+44     	; 0x23d8 <itoa+0x3a>
    23ac:	4a 30       	cpi	r20, 0x0A	; 10
    23ae:	29 f4       	brne	.+10     	; 0x23ba <itoa+0x1c>
    23b0:	97 fb       	bst	r25, 7
    23b2:	1e f4       	brtc	.+6      	; 0x23ba <itoa+0x1c>
    23b4:	90 95       	com	r25
    23b6:	81 95       	neg	r24
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	64 2f       	mov	r22, r20
    23bc:	77 27       	eor	r23, r23
    23be:	0e 94 84 11 	call	0x2308	; 0x2308 <__udivmodhi4>
    23c2:	80 5d       	subi	r24, 0xD0	; 208
    23c4:	8a 33       	cpi	r24, 0x3A	; 58
    23c6:	0c f0       	brlt	.+2      	; 0x23ca <itoa+0x2c>
    23c8:	89 5d       	subi	r24, 0xD9	; 217
    23ca:	81 93       	st	Z+, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	a1 f7       	brne	.-24     	; 0x23ba <itoa+0x1c>
    23d2:	16 f4       	brtc	.+4      	; 0x23d8 <itoa+0x3a>
    23d4:	5d e2       	ldi	r21, 0x2D	; 45
    23d6:	51 93       	st	Z+, r21
    23d8:	10 82       	st	Z, r1
    23da:	c9 01       	movw	r24, r18
    23dc:	0c 94 07 14 	jmp	0x280e	; 0x280e <strrev>

000023e0 <sprintf>:
    23e0:	ae e0       	ldi	r26, 0x0E	; 14
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e6 ef       	ldi	r30, 0xF6	; 246
    23e6:	f1 e1       	ldi	r31, 0x11	; 17
    23e8:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__+0x1c>
    23ec:	0d 89       	ldd	r16, Y+21	; 0x15
    23ee:	1e 89       	ldd	r17, Y+22	; 0x16
    23f0:	86 e0       	ldi	r24, 0x06	; 6
    23f2:	8c 83       	std	Y+4, r24	; 0x04
    23f4:	1a 83       	std	Y+2, r17	; 0x02
    23f6:	09 83       	std	Y+1, r16	; 0x01
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	9f e7       	ldi	r25, 0x7F	; 127
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	9e 01       	movw	r18, r28
    2402:	27 5e       	subi	r18, 0xE7	; 231
    2404:	3f 4f       	sbci	r19, 0xFF	; 255
    2406:	ce 01       	movw	r24, r28
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	6f 89       	ldd	r22, Y+23	; 0x17
    240c:	78 8d       	ldd	r23, Y+24	; 0x18
    240e:	a9 01       	movw	r20, r18
    2410:	0e 94 14 12 	call	0x2428	; 0x2428 <vfprintf>
    2414:	2f 81       	ldd	r18, Y+7	; 0x07
    2416:	38 85       	ldd	r19, Y+8	; 0x08
    2418:	02 0f       	add	r16, r18
    241a:	13 1f       	adc	r17, r19
    241c:	f8 01       	movw	r30, r16
    241e:	10 82       	st	Z, r1
    2420:	2e 96       	adiw	r28, 0x0e	; 14
    2422:	e4 e0       	ldi	r30, 0x04	; 4
    2424:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__epilogue_restores__+0x1c>

00002428 <vfprintf>:
    2428:	ab e0       	ldi	r26, 0x0B	; 11
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	ea e1       	ldi	r30, 0x1A	; 26
    242e:	f2 e1       	ldi	r31, 0x12	; 18
    2430:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__prologue_saves__>
    2434:	3c 01       	movw	r6, r24
    2436:	2b 01       	movw	r4, r22
    2438:	5a 01       	movw	r10, r20
    243a:	fc 01       	movw	r30, r24
    243c:	17 82       	std	Z+7, r1	; 0x07
    243e:	16 82       	std	Z+6, r1	; 0x06
    2440:	83 81       	ldd	r24, Z+3	; 0x03
    2442:	81 fd       	sbrc	r24, 1
    2444:	03 c0       	rjmp	.+6      	; 0x244c <vfprintf+0x24>
    2446:	6f ef       	ldi	r22, 0xFF	; 255
    2448:	7f ef       	ldi	r23, 0xFF	; 255
    244a:	c6 c1       	rjmp	.+908    	; 0x27d8 <vfprintf+0x3b0>
    244c:	9a e0       	ldi	r25, 0x0A	; 10
    244e:	89 2e       	mov	r8, r25
    2450:	1e 01       	movw	r2, r28
    2452:	08 94       	sec
    2454:	21 1c       	adc	r2, r1
    2456:	31 1c       	adc	r3, r1
    2458:	f3 01       	movw	r30, r6
    245a:	23 81       	ldd	r18, Z+3	; 0x03
    245c:	f2 01       	movw	r30, r4
    245e:	23 fd       	sbrc	r18, 3
    2460:	85 91       	lpm	r24, Z+
    2462:	23 ff       	sbrs	r18, 3
    2464:	81 91       	ld	r24, Z+
    2466:	2f 01       	movw	r4, r30
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <vfprintf+0x46>
    246c:	b2 c1       	rjmp	.+868    	; 0x27d2 <vfprintf+0x3aa>
    246e:	85 32       	cpi	r24, 0x25	; 37
    2470:	39 f4       	brne	.+14     	; 0x2480 <vfprintf+0x58>
    2472:	23 fd       	sbrc	r18, 3
    2474:	85 91       	lpm	r24, Z+
    2476:	23 ff       	sbrs	r18, 3
    2478:	81 91       	ld	r24, Z+
    247a:	2f 01       	movw	r4, r30
    247c:	85 32       	cpi	r24, 0x25	; 37
    247e:	29 f4       	brne	.+10     	; 0x248a <vfprintf+0x62>
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	b3 01       	movw	r22, r6
    2484:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    2488:	e7 cf       	rjmp	.-50     	; 0x2458 <vfprintf+0x30>
    248a:	98 2f       	mov	r25, r24
    248c:	ff 24       	eor	r15, r15
    248e:	ee 24       	eor	r14, r14
    2490:	99 24       	eor	r9, r9
    2492:	ff e1       	ldi	r31, 0x1F	; 31
    2494:	ff 15       	cp	r31, r15
    2496:	d0 f0       	brcs	.+52     	; 0x24cc <vfprintf+0xa4>
    2498:	9b 32       	cpi	r25, 0x2B	; 43
    249a:	69 f0       	breq	.+26     	; 0x24b6 <vfprintf+0x8e>
    249c:	9c 32       	cpi	r25, 0x2C	; 44
    249e:	28 f4       	brcc	.+10     	; 0x24aa <vfprintf+0x82>
    24a0:	90 32       	cpi	r25, 0x20	; 32
    24a2:	59 f0       	breq	.+22     	; 0x24ba <vfprintf+0x92>
    24a4:	93 32       	cpi	r25, 0x23	; 35
    24a6:	91 f4       	brne	.+36     	; 0x24cc <vfprintf+0xa4>
    24a8:	0e c0       	rjmp	.+28     	; 0x24c6 <vfprintf+0x9e>
    24aa:	9d 32       	cpi	r25, 0x2D	; 45
    24ac:	49 f0       	breq	.+18     	; 0x24c0 <vfprintf+0x98>
    24ae:	90 33       	cpi	r25, 0x30	; 48
    24b0:	69 f4       	brne	.+26     	; 0x24cc <vfprintf+0xa4>
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	24 c0       	rjmp	.+72     	; 0x24fe <vfprintf+0xd6>
    24b6:	52 e0       	ldi	r21, 0x02	; 2
    24b8:	f5 2a       	or	r15, r21
    24ba:	84 e0       	ldi	r24, 0x04	; 4
    24bc:	f8 2a       	or	r15, r24
    24be:	28 c0       	rjmp	.+80     	; 0x2510 <vfprintf+0xe8>
    24c0:	98 e0       	ldi	r25, 0x08	; 8
    24c2:	f9 2a       	or	r15, r25
    24c4:	25 c0       	rjmp	.+74     	; 0x2510 <vfprintf+0xe8>
    24c6:	e0 e1       	ldi	r30, 0x10	; 16
    24c8:	fe 2a       	or	r15, r30
    24ca:	22 c0       	rjmp	.+68     	; 0x2510 <vfprintf+0xe8>
    24cc:	f7 fc       	sbrc	r15, 7
    24ce:	29 c0       	rjmp	.+82     	; 0x2522 <vfprintf+0xfa>
    24d0:	89 2f       	mov	r24, r25
    24d2:	80 53       	subi	r24, 0x30	; 48
    24d4:	8a 30       	cpi	r24, 0x0A	; 10
    24d6:	70 f4       	brcc	.+28     	; 0x24f4 <vfprintf+0xcc>
    24d8:	f6 fe       	sbrs	r15, 6
    24da:	05 c0       	rjmp	.+10     	; 0x24e6 <vfprintf+0xbe>
    24dc:	98 9c       	mul	r9, r8
    24de:	90 2c       	mov	r9, r0
    24e0:	11 24       	eor	r1, r1
    24e2:	98 0e       	add	r9, r24
    24e4:	15 c0       	rjmp	.+42     	; 0x2510 <vfprintf+0xe8>
    24e6:	e8 9c       	mul	r14, r8
    24e8:	e0 2c       	mov	r14, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	e8 0e       	add	r14, r24
    24ee:	f0 e2       	ldi	r31, 0x20	; 32
    24f0:	ff 2a       	or	r15, r31
    24f2:	0e c0       	rjmp	.+28     	; 0x2510 <vfprintf+0xe8>
    24f4:	9e 32       	cpi	r25, 0x2E	; 46
    24f6:	29 f4       	brne	.+10     	; 0x2502 <vfprintf+0xda>
    24f8:	f6 fc       	sbrc	r15, 6
    24fa:	6b c1       	rjmp	.+726    	; 0x27d2 <vfprintf+0x3aa>
    24fc:	40 e4       	ldi	r20, 0x40	; 64
    24fe:	f4 2a       	or	r15, r20
    2500:	07 c0       	rjmp	.+14     	; 0x2510 <vfprintf+0xe8>
    2502:	9c 36       	cpi	r25, 0x6C	; 108
    2504:	19 f4       	brne	.+6      	; 0x250c <vfprintf+0xe4>
    2506:	50 e8       	ldi	r21, 0x80	; 128
    2508:	f5 2a       	or	r15, r21
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <vfprintf+0xe8>
    250c:	98 36       	cpi	r25, 0x68	; 104
    250e:	49 f4       	brne	.+18     	; 0x2522 <vfprintf+0xfa>
    2510:	f2 01       	movw	r30, r4
    2512:	23 fd       	sbrc	r18, 3
    2514:	95 91       	lpm	r25, Z+
    2516:	23 ff       	sbrs	r18, 3
    2518:	91 91       	ld	r25, Z+
    251a:	2f 01       	movw	r4, r30
    251c:	99 23       	and	r25, r25
    251e:	09 f0       	breq	.+2      	; 0x2522 <vfprintf+0xfa>
    2520:	b8 cf       	rjmp	.-144    	; 0x2492 <vfprintf+0x6a>
    2522:	89 2f       	mov	r24, r25
    2524:	85 54       	subi	r24, 0x45	; 69
    2526:	83 30       	cpi	r24, 0x03	; 3
    2528:	18 f0       	brcs	.+6      	; 0x2530 <vfprintf+0x108>
    252a:	80 52       	subi	r24, 0x20	; 32
    252c:	83 30       	cpi	r24, 0x03	; 3
    252e:	38 f4       	brcc	.+14     	; 0x253e <vfprintf+0x116>
    2530:	44 e0       	ldi	r20, 0x04	; 4
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	a4 0e       	add	r10, r20
    2536:	b5 1e       	adc	r11, r21
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	59 83       	std	Y+1, r21	; 0x01
    253c:	0f c0       	rjmp	.+30     	; 0x255c <vfprintf+0x134>
    253e:	93 36       	cpi	r25, 0x63	; 99
    2540:	31 f0       	breq	.+12     	; 0x254e <vfprintf+0x126>
    2542:	93 37       	cpi	r25, 0x73	; 115
    2544:	79 f0       	breq	.+30     	; 0x2564 <vfprintf+0x13c>
    2546:	93 35       	cpi	r25, 0x53	; 83
    2548:	09 f0       	breq	.+2      	; 0x254c <vfprintf+0x124>
    254a:	56 c0       	rjmp	.+172    	; 0x25f8 <vfprintf+0x1d0>
    254c:	20 c0       	rjmp	.+64     	; 0x258e <vfprintf+0x166>
    254e:	f5 01       	movw	r30, r10
    2550:	80 81       	ld	r24, Z
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	a4 0e       	add	r10, r20
    255a:	b5 1e       	adc	r11, r21
    255c:	61 01       	movw	r12, r2
    255e:	01 e0       	ldi	r16, 0x01	; 1
    2560:	10 e0       	ldi	r17, 0x00	; 0
    2562:	12 c0       	rjmp	.+36     	; 0x2588 <vfprintf+0x160>
    2564:	f5 01       	movw	r30, r10
    2566:	c0 80       	ld	r12, Z
    2568:	d1 80       	ldd	r13, Z+1	; 0x01
    256a:	f6 fc       	sbrc	r15, 6
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <vfprintf+0x14c>
    256e:	6f ef       	ldi	r22, 0xFF	; 255
    2570:	7f ef       	ldi	r23, 0xFF	; 255
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <vfprintf+0x150>
    2574:	69 2d       	mov	r22, r9
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	42 e0       	ldi	r20, 0x02	; 2
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	a4 0e       	add	r10, r20
    257e:	b5 1e       	adc	r11, r21
    2580:	c6 01       	movw	r24, r12
    2582:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <strnlen>
    2586:	8c 01       	movw	r16, r24
    2588:	5f e7       	ldi	r21, 0x7F	; 127
    258a:	f5 22       	and	r15, r21
    258c:	14 c0       	rjmp	.+40     	; 0x25b6 <vfprintf+0x18e>
    258e:	f5 01       	movw	r30, r10
    2590:	c0 80       	ld	r12, Z
    2592:	d1 80       	ldd	r13, Z+1	; 0x01
    2594:	f6 fc       	sbrc	r15, 6
    2596:	03 c0       	rjmp	.+6      	; 0x259e <vfprintf+0x176>
    2598:	6f ef       	ldi	r22, 0xFF	; 255
    259a:	7f ef       	ldi	r23, 0xFF	; 255
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x17a>
    259e:	69 2d       	mov	r22, r9
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	42 e0       	ldi	r20, 0x02	; 2
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	a4 0e       	add	r10, r20
    25a8:	b5 1e       	adc	r11, r21
    25aa:	c6 01       	movw	r24, r12
    25ac:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <strnlen_P>
    25b0:	8c 01       	movw	r16, r24
    25b2:	50 e8       	ldi	r21, 0x80	; 128
    25b4:	f5 2a       	or	r15, r21
    25b6:	f3 fe       	sbrs	r15, 3
    25b8:	07 c0       	rjmp	.+14     	; 0x25c8 <vfprintf+0x1a0>
    25ba:	1a c0       	rjmp	.+52     	; 0x25f0 <vfprintf+0x1c8>
    25bc:	80 e2       	ldi	r24, 0x20	; 32
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	b3 01       	movw	r22, r6
    25c2:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    25c6:	ea 94       	dec	r14
    25c8:	8e 2d       	mov	r24, r14
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	08 17       	cp	r16, r24
    25ce:	19 07       	cpc	r17, r25
    25d0:	a8 f3       	brcs	.-22     	; 0x25bc <vfprintf+0x194>
    25d2:	0e c0       	rjmp	.+28     	; 0x25f0 <vfprintf+0x1c8>
    25d4:	f6 01       	movw	r30, r12
    25d6:	f7 fc       	sbrc	r15, 7
    25d8:	85 91       	lpm	r24, Z+
    25da:	f7 fe       	sbrs	r15, 7
    25dc:	81 91       	ld	r24, Z+
    25de:	6f 01       	movw	r12, r30
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	b3 01       	movw	r22, r6
    25e4:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    25e8:	e1 10       	cpse	r14, r1
    25ea:	ea 94       	dec	r14
    25ec:	01 50       	subi	r16, 0x01	; 1
    25ee:	10 40       	sbci	r17, 0x00	; 0
    25f0:	01 15       	cp	r16, r1
    25f2:	11 05       	cpc	r17, r1
    25f4:	79 f7       	brne	.-34     	; 0x25d4 <vfprintf+0x1ac>
    25f6:	ea c0       	rjmp	.+468    	; 0x27cc <vfprintf+0x3a4>
    25f8:	94 36       	cpi	r25, 0x64	; 100
    25fa:	11 f0       	breq	.+4      	; 0x2600 <vfprintf+0x1d8>
    25fc:	99 36       	cpi	r25, 0x69	; 105
    25fe:	69 f5       	brne	.+90     	; 0x265a <vfprintf+0x232>
    2600:	f7 fe       	sbrs	r15, 7
    2602:	08 c0       	rjmp	.+16     	; 0x2614 <vfprintf+0x1ec>
    2604:	f5 01       	movw	r30, r10
    2606:	20 81       	ld	r18, Z
    2608:	31 81       	ldd	r19, Z+1	; 0x01
    260a:	42 81       	ldd	r20, Z+2	; 0x02
    260c:	53 81       	ldd	r21, Z+3	; 0x03
    260e:	84 e0       	ldi	r24, 0x04	; 4
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0a c0       	rjmp	.+20     	; 0x2628 <vfprintf+0x200>
    2614:	f5 01       	movw	r30, r10
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	9c 01       	movw	r18, r24
    261c:	44 27       	eor	r20, r20
    261e:	37 fd       	sbrc	r19, 7
    2620:	40 95       	com	r20
    2622:	54 2f       	mov	r21, r20
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a8 0e       	add	r10, r24
    262a:	b9 1e       	adc	r11, r25
    262c:	9f e6       	ldi	r25, 0x6F	; 111
    262e:	f9 22       	and	r15, r25
    2630:	57 ff       	sbrs	r21, 7
    2632:	09 c0       	rjmp	.+18     	; 0x2646 <vfprintf+0x21e>
    2634:	50 95       	com	r21
    2636:	40 95       	com	r20
    2638:	30 95       	com	r19
    263a:	21 95       	neg	r18
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	4f 4f       	sbci	r20, 0xFF	; 255
    2640:	5f 4f       	sbci	r21, 0xFF	; 255
    2642:	e0 e8       	ldi	r30, 0x80	; 128
    2644:	fe 2a       	or	r15, r30
    2646:	ca 01       	movw	r24, r20
    2648:	b9 01       	movw	r22, r18
    264a:	a1 01       	movw	r20, r2
    264c:	2a e0       	ldi	r18, 0x0A	; 10
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	0e 94 43 14 	call	0x2886	; 0x2886 <__ultoa_invert>
    2654:	d8 2e       	mov	r13, r24
    2656:	d2 18       	sub	r13, r2
    2658:	40 c0       	rjmp	.+128    	; 0x26da <vfprintf+0x2b2>
    265a:	95 37       	cpi	r25, 0x75	; 117
    265c:	29 f4       	brne	.+10     	; 0x2668 <vfprintf+0x240>
    265e:	1f 2d       	mov	r17, r15
    2660:	1f 7e       	andi	r17, 0xEF	; 239
    2662:	2a e0       	ldi	r18, 0x0A	; 10
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	1d c0       	rjmp	.+58     	; 0x26a2 <vfprintf+0x27a>
    2668:	1f 2d       	mov	r17, r15
    266a:	19 7f       	andi	r17, 0xF9	; 249
    266c:	9f 36       	cpi	r25, 0x6F	; 111
    266e:	61 f0       	breq	.+24     	; 0x2688 <vfprintf+0x260>
    2670:	90 37       	cpi	r25, 0x70	; 112
    2672:	20 f4       	brcc	.+8      	; 0x267c <vfprintf+0x254>
    2674:	98 35       	cpi	r25, 0x58	; 88
    2676:	09 f0       	breq	.+2      	; 0x267a <vfprintf+0x252>
    2678:	ac c0       	rjmp	.+344    	; 0x27d2 <vfprintf+0x3aa>
    267a:	0f c0       	rjmp	.+30     	; 0x269a <vfprintf+0x272>
    267c:	90 37       	cpi	r25, 0x70	; 112
    267e:	39 f0       	breq	.+14     	; 0x268e <vfprintf+0x266>
    2680:	98 37       	cpi	r25, 0x78	; 120
    2682:	09 f0       	breq	.+2      	; 0x2686 <vfprintf+0x25e>
    2684:	a6 c0       	rjmp	.+332    	; 0x27d2 <vfprintf+0x3aa>
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <vfprintf+0x268>
    2688:	28 e0       	ldi	r18, 0x08	; 8
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	0a c0       	rjmp	.+20     	; 0x26a2 <vfprintf+0x27a>
    268e:	10 61       	ori	r17, 0x10	; 16
    2690:	14 fd       	sbrc	r17, 4
    2692:	14 60       	ori	r17, 0x04	; 4
    2694:	20 e1       	ldi	r18, 0x10	; 16
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <vfprintf+0x27a>
    269a:	14 fd       	sbrc	r17, 4
    269c:	16 60       	ori	r17, 0x06	; 6
    269e:	20 e1       	ldi	r18, 0x10	; 16
    26a0:	32 e0       	ldi	r19, 0x02	; 2
    26a2:	17 ff       	sbrs	r17, 7
    26a4:	08 c0       	rjmp	.+16     	; 0x26b6 <vfprintf+0x28e>
    26a6:	f5 01       	movw	r30, r10
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	44 e0       	ldi	r20, 0x04	; 4
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <vfprintf+0x29e>
    26b6:	f5 01       	movw	r30, r10
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	bc 01       	movw	r22, r24
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	42 e0       	ldi	r20, 0x02	; 2
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	a4 0e       	add	r10, r20
    26c8:	b5 1e       	adc	r11, r21
    26ca:	a1 01       	movw	r20, r2
    26cc:	0e 94 43 14 	call	0x2886	; 0x2886 <__ultoa_invert>
    26d0:	d8 2e       	mov	r13, r24
    26d2:	d2 18       	sub	r13, r2
    26d4:	8f e7       	ldi	r24, 0x7F	; 127
    26d6:	f8 2e       	mov	r15, r24
    26d8:	f1 22       	and	r15, r17
    26da:	f6 fe       	sbrs	r15, 6
    26dc:	0b c0       	rjmp	.+22     	; 0x26f4 <vfprintf+0x2cc>
    26de:	5e ef       	ldi	r21, 0xFE	; 254
    26e0:	f5 22       	and	r15, r21
    26e2:	d9 14       	cp	r13, r9
    26e4:	38 f4       	brcc	.+14     	; 0x26f4 <vfprintf+0x2cc>
    26e6:	f4 fe       	sbrs	r15, 4
    26e8:	07 c0       	rjmp	.+14     	; 0x26f8 <vfprintf+0x2d0>
    26ea:	f2 fc       	sbrc	r15, 2
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <vfprintf+0x2d0>
    26ee:	8f ee       	ldi	r24, 0xEF	; 239
    26f0:	f8 22       	and	r15, r24
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <vfprintf+0x2d0>
    26f4:	1d 2d       	mov	r17, r13
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <vfprintf+0x2d2>
    26f8:	19 2d       	mov	r17, r9
    26fa:	f4 fe       	sbrs	r15, 4
    26fc:	0d c0       	rjmp	.+26     	; 0x2718 <vfprintf+0x2f0>
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 0d       	add	r30, r13
    2702:	f1 1d       	adc	r31, r1
    2704:	80 81       	ld	r24, Z
    2706:	80 33       	cpi	r24, 0x30	; 48
    2708:	19 f4       	brne	.+6      	; 0x2710 <vfprintf+0x2e8>
    270a:	99 ee       	ldi	r25, 0xE9	; 233
    270c:	f9 22       	and	r15, r25
    270e:	08 c0       	rjmp	.+16     	; 0x2720 <vfprintf+0x2f8>
    2710:	1f 5f       	subi	r17, 0xFF	; 255
    2712:	f2 fe       	sbrs	r15, 2
    2714:	05 c0       	rjmp	.+10     	; 0x2720 <vfprintf+0x2f8>
    2716:	03 c0       	rjmp	.+6      	; 0x271e <vfprintf+0x2f6>
    2718:	8f 2d       	mov	r24, r15
    271a:	86 78       	andi	r24, 0x86	; 134
    271c:	09 f0       	breq	.+2      	; 0x2720 <vfprintf+0x2f8>
    271e:	1f 5f       	subi	r17, 0xFF	; 255
    2720:	0f 2d       	mov	r16, r15
    2722:	f3 fc       	sbrc	r15, 3
    2724:	14 c0       	rjmp	.+40     	; 0x274e <vfprintf+0x326>
    2726:	f0 fe       	sbrs	r15, 0
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <vfprintf+0x320>
    272a:	1e 15       	cp	r17, r14
    272c:	10 f0       	brcs	.+4      	; 0x2732 <vfprintf+0x30a>
    272e:	9d 2c       	mov	r9, r13
    2730:	0b c0       	rjmp	.+22     	; 0x2748 <vfprintf+0x320>
    2732:	9d 2c       	mov	r9, r13
    2734:	9e 0c       	add	r9, r14
    2736:	91 1a       	sub	r9, r17
    2738:	1e 2d       	mov	r17, r14
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <vfprintf+0x320>
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	b3 01       	movw	r22, r6
    2742:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    2746:	1f 5f       	subi	r17, 0xFF	; 255
    2748:	1e 15       	cp	r17, r14
    274a:	c0 f3       	brcs	.-16     	; 0x273c <vfprintf+0x314>
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <vfprintf+0x32e>
    274e:	1e 15       	cp	r17, r14
    2750:	10 f4       	brcc	.+4      	; 0x2756 <vfprintf+0x32e>
    2752:	e1 1a       	sub	r14, r17
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <vfprintf+0x330>
    2756:	ee 24       	eor	r14, r14
    2758:	04 ff       	sbrs	r16, 4
    275a:	0f c0       	rjmp	.+30     	; 0x277a <vfprintf+0x352>
    275c:	80 e3       	ldi	r24, 0x30	; 48
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	b3 01       	movw	r22, r6
    2762:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    2766:	02 ff       	sbrs	r16, 2
    2768:	1d c0       	rjmp	.+58     	; 0x27a4 <vfprintf+0x37c>
    276a:	01 fd       	sbrc	r16, 1
    276c:	03 c0       	rjmp	.+6      	; 0x2774 <vfprintf+0x34c>
    276e:	88 e7       	ldi	r24, 0x78	; 120
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <vfprintf+0x368>
    2774:	88 e5       	ldi	r24, 0x58	; 88
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0b c0       	rjmp	.+22     	; 0x2790 <vfprintf+0x368>
    277a:	80 2f       	mov	r24, r16
    277c:	86 78       	andi	r24, 0x86	; 134
    277e:	91 f0       	breq	.+36     	; 0x27a4 <vfprintf+0x37c>
    2780:	01 ff       	sbrs	r16, 1
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <vfprintf+0x360>
    2784:	8b e2       	ldi	r24, 0x2B	; 43
    2786:	01 c0       	rjmp	.+2      	; 0x278a <vfprintf+0x362>
    2788:	80 e2       	ldi	r24, 0x20	; 32
    278a:	f7 fc       	sbrc	r15, 7
    278c:	8d e2       	ldi	r24, 0x2D	; 45
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	b3 01       	movw	r22, r6
    2792:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    2796:	06 c0       	rjmp	.+12     	; 0x27a4 <vfprintf+0x37c>
    2798:	80 e3       	ldi	r24, 0x30	; 48
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	b3 01       	movw	r22, r6
    279e:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    27a2:	9a 94       	dec	r9
    27a4:	d9 14       	cp	r13, r9
    27a6:	c0 f3       	brcs	.-16     	; 0x2798 <vfprintf+0x370>
    27a8:	da 94       	dec	r13
    27aa:	f1 01       	movw	r30, r2
    27ac:	ed 0d       	add	r30, r13
    27ae:	f1 1d       	adc	r31, r1
    27b0:	80 81       	ld	r24, Z
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	b3 01       	movw	r22, r6
    27b6:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    27ba:	dd 20       	and	r13, r13
    27bc:	a9 f7       	brne	.-22     	; 0x27a8 <vfprintf+0x380>
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <vfprintf+0x3a4>
    27c0:	80 e2       	ldi	r24, 0x20	; 32
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	b3 01       	movw	r22, r6
    27c6:	0e 94 17 14 	call	0x282e	; 0x282e <fputc>
    27ca:	ea 94       	dec	r14
    27cc:	ee 20       	and	r14, r14
    27ce:	c1 f7       	brne	.-16     	; 0x27c0 <vfprintf+0x398>
    27d0:	43 ce       	rjmp	.-890    	; 0x2458 <vfprintf+0x30>
    27d2:	f3 01       	movw	r30, r6
    27d4:	66 81       	ldd	r22, Z+6	; 0x06
    27d6:	77 81       	ldd	r23, Z+7	; 0x07
    27d8:	cb 01       	movw	r24, r22
    27da:	2b 96       	adiw	r28, 0x0b	; 11
    27dc:	e2 e1       	ldi	r30, 0x12	; 18
    27de:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__epilogue_restores__>

000027e2 <strnlen_P>:
    27e2:	fc 01       	movw	r30, r24
    27e4:	05 90       	lpm	r0, Z+
    27e6:	61 50       	subi	r22, 0x01	; 1
    27e8:	70 40       	sbci	r23, 0x00	; 0
    27ea:	01 10       	cpse	r0, r1
    27ec:	d8 f7       	brcc	.-10     	; 0x27e4 <strnlen_P+0x2>
    27ee:	80 95       	com	r24
    27f0:	90 95       	com	r25
    27f2:	8e 0f       	add	r24, r30
    27f4:	9f 1f       	adc	r25, r31
    27f6:	08 95       	ret

000027f8 <strnlen>:
    27f8:	fc 01       	movw	r30, r24
    27fa:	61 50       	subi	r22, 0x01	; 1
    27fc:	70 40       	sbci	r23, 0x00	; 0
    27fe:	01 90       	ld	r0, Z+
    2800:	01 10       	cpse	r0, r1
    2802:	d8 f7       	brcc	.-10     	; 0x27fa <strnlen+0x2>
    2804:	80 95       	com	r24
    2806:	90 95       	com	r25
    2808:	8e 0f       	add	r24, r30
    280a:	9f 1f       	adc	r25, r31
    280c:	08 95       	ret

0000280e <strrev>:
    280e:	dc 01       	movw	r26, r24
    2810:	fc 01       	movw	r30, r24
    2812:	67 2f       	mov	r22, r23
    2814:	71 91       	ld	r23, Z+
    2816:	77 23       	and	r23, r23
    2818:	e1 f7       	brne	.-8      	; 0x2812 <strrev+0x4>
    281a:	32 97       	sbiw	r30, 0x02	; 2
    281c:	04 c0       	rjmp	.+8      	; 0x2826 <strrev+0x18>
    281e:	7c 91       	ld	r23, X
    2820:	6d 93       	st	X+, r22
    2822:	70 83       	st	Z, r23
    2824:	62 91       	ld	r22, -Z
    2826:	ae 17       	cp	r26, r30
    2828:	bf 07       	cpc	r27, r31
    282a:	c8 f3       	brcs	.-14     	; 0x281e <strrev+0x10>
    282c:	08 95       	ret

0000282e <fputc>:
    282e:	0f 93       	push	r16
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	8c 01       	movw	r16, r24
    2838:	eb 01       	movw	r28, r22
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	81 ff       	sbrs	r24, 1
    283e:	1b c0       	rjmp	.+54     	; 0x2876 <fputc+0x48>
    2840:	82 ff       	sbrs	r24, 2
    2842:	0d c0       	rjmp	.+26     	; 0x285e <fputc+0x30>
    2844:	2e 81       	ldd	r18, Y+6	; 0x06
    2846:	3f 81       	ldd	r19, Y+7	; 0x07
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	9d 81       	ldd	r25, Y+5	; 0x05
    284c:	28 17       	cp	r18, r24
    284e:	39 07       	cpc	r19, r25
    2850:	64 f4       	brge	.+24     	; 0x286a <fputc+0x3c>
    2852:	e8 81       	ld	r30, Y
    2854:	f9 81       	ldd	r31, Y+1	; 0x01
    2856:	01 93       	st	Z+, r16
    2858:	f9 83       	std	Y+1, r31	; 0x01
    285a:	e8 83       	st	Y, r30
    285c:	06 c0       	rjmp	.+12     	; 0x286a <fputc+0x3c>
    285e:	e8 85       	ldd	r30, Y+8	; 0x08
    2860:	f9 85       	ldd	r31, Y+9	; 0x09
    2862:	80 2f       	mov	r24, r16
    2864:	09 95       	icall
    2866:	89 2b       	or	r24, r25
    2868:	31 f4       	brne	.+12     	; 0x2876 <fputc+0x48>
    286a:	8e 81       	ldd	r24, Y+6	; 0x06
    286c:	9f 81       	ldd	r25, Y+7	; 0x07
    286e:	01 96       	adiw	r24, 0x01	; 1
    2870:	9f 83       	std	Y+7, r25	; 0x07
    2872:	8e 83       	std	Y+6, r24	; 0x06
    2874:	02 c0       	rjmp	.+4      	; 0x287a <fputc+0x4c>
    2876:	0f ef       	ldi	r16, 0xFF	; 255
    2878:	1f ef       	ldi	r17, 0xFF	; 255
    287a:	c8 01       	movw	r24, r16
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <__ultoa_invert>:
    2886:	fa 01       	movw	r30, r20
    2888:	aa 27       	eor	r26, r26
    288a:	28 30       	cpi	r18, 0x08	; 8
    288c:	51 f1       	breq	.+84     	; 0x28e2 <__ultoa_invert+0x5c>
    288e:	20 31       	cpi	r18, 0x10	; 16
    2890:	81 f1       	breq	.+96     	; 0x28f2 <__ultoa_invert+0x6c>
    2892:	e8 94       	clt
    2894:	6f 93       	push	r22
    2896:	6e 7f       	andi	r22, 0xFE	; 254
    2898:	6e 5f       	subi	r22, 0xFE	; 254
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	8f 4f       	sbci	r24, 0xFF	; 255
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	af 4f       	sbci	r26, 0xFF	; 255
    28a2:	b1 e0       	ldi	r27, 0x01	; 1
    28a4:	3e d0       	rcall	.+124    	; 0x2922 <__ultoa_invert+0x9c>
    28a6:	b4 e0       	ldi	r27, 0x04	; 4
    28a8:	3c d0       	rcall	.+120    	; 0x2922 <__ultoa_invert+0x9c>
    28aa:	67 0f       	add	r22, r23
    28ac:	78 1f       	adc	r23, r24
    28ae:	89 1f       	adc	r24, r25
    28b0:	9a 1f       	adc	r25, r26
    28b2:	a1 1d       	adc	r26, r1
    28b4:	68 0f       	add	r22, r24
    28b6:	79 1f       	adc	r23, r25
    28b8:	8a 1f       	adc	r24, r26
    28ba:	91 1d       	adc	r25, r1
    28bc:	a1 1d       	adc	r26, r1
    28be:	6a 0f       	add	r22, r26
    28c0:	71 1d       	adc	r23, r1
    28c2:	81 1d       	adc	r24, r1
    28c4:	91 1d       	adc	r25, r1
    28c6:	a1 1d       	adc	r26, r1
    28c8:	20 d0       	rcall	.+64     	; 0x290a <__ultoa_invert+0x84>
    28ca:	09 f4       	brne	.+2      	; 0x28ce <__ultoa_invert+0x48>
    28cc:	68 94       	set
    28ce:	3f 91       	pop	r19
    28d0:	2a e0       	ldi	r18, 0x0A	; 10
    28d2:	26 9f       	mul	r18, r22
    28d4:	11 24       	eor	r1, r1
    28d6:	30 19       	sub	r19, r0
    28d8:	30 5d       	subi	r19, 0xD0	; 208
    28da:	31 93       	st	Z+, r19
    28dc:	de f6       	brtc	.-74     	; 0x2894 <__ultoa_invert+0xe>
    28de:	cf 01       	movw	r24, r30
    28e0:	08 95       	ret
    28e2:	46 2f       	mov	r20, r22
    28e4:	47 70       	andi	r20, 0x07	; 7
    28e6:	40 5d       	subi	r20, 0xD0	; 208
    28e8:	41 93       	st	Z+, r20
    28ea:	b3 e0       	ldi	r27, 0x03	; 3
    28ec:	0f d0       	rcall	.+30     	; 0x290c <__ultoa_invert+0x86>
    28ee:	c9 f7       	brne	.-14     	; 0x28e2 <__ultoa_invert+0x5c>
    28f0:	f6 cf       	rjmp	.-20     	; 0x28de <__ultoa_invert+0x58>
    28f2:	46 2f       	mov	r20, r22
    28f4:	4f 70       	andi	r20, 0x0F	; 15
    28f6:	40 5d       	subi	r20, 0xD0	; 208
    28f8:	4a 33       	cpi	r20, 0x3A	; 58
    28fa:	18 f0       	brcs	.+6      	; 0x2902 <__ultoa_invert+0x7c>
    28fc:	49 5d       	subi	r20, 0xD9	; 217
    28fe:	31 fd       	sbrc	r19, 1
    2900:	40 52       	subi	r20, 0x20	; 32
    2902:	41 93       	st	Z+, r20
    2904:	02 d0       	rcall	.+4      	; 0x290a <__ultoa_invert+0x84>
    2906:	a9 f7       	brne	.-22     	; 0x28f2 <__ultoa_invert+0x6c>
    2908:	ea cf       	rjmp	.-44     	; 0x28de <__ultoa_invert+0x58>
    290a:	b4 e0       	ldi	r27, 0x04	; 4
    290c:	a6 95       	lsr	r26
    290e:	97 95       	ror	r25
    2910:	87 95       	ror	r24
    2912:	77 95       	ror	r23
    2914:	67 95       	ror	r22
    2916:	ba 95       	dec	r27
    2918:	c9 f7       	brne	.-14     	; 0x290c <__ultoa_invert+0x86>
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	61 05       	cpc	r22, r1
    291e:	71 05       	cpc	r23, r1
    2920:	08 95       	ret
    2922:	9b 01       	movw	r18, r22
    2924:	ac 01       	movw	r20, r24
    2926:	0a 2e       	mov	r0, r26
    2928:	06 94       	lsr	r0
    292a:	57 95       	ror	r21
    292c:	47 95       	ror	r20
    292e:	37 95       	ror	r19
    2930:	27 95       	ror	r18
    2932:	ba 95       	dec	r27
    2934:	c9 f7       	brne	.-14     	; 0x2928 <__ultoa_invert+0xa2>
    2936:	62 0f       	add	r22, r18
    2938:	73 1f       	adc	r23, r19
    293a:	84 1f       	adc	r24, r20
    293c:	95 1f       	adc	r25, r21
    293e:	a0 1d       	adc	r26, r0
    2940:	08 95       	ret

00002942 <_exit>:
    2942:	f8 94       	cli

00002944 <__stop_program>:
    2944:	ff cf       	rjmp	.-2      	; 0x2944 <__stop_program>
